
LED Sequence V3.0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001348  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000013bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800060  00800060  000013bc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000013bc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000013ec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000138  00000000  00000000  00001428  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003082  00000000  00000000  00001560  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009a9  00000000  00000000  000045e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001586  00000000  00000000  00004f8b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000270  00000000  00000000  00006514  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000830  00000000  00000000  00006784  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000fbb  00000000  00000000  00006fb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  00007f6f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 32 00 	jmp	0x64	; 0x64 <__ctors_end>
       4:	0c 94 e0 02 	jmp	0x5c0	; 0x5c0 <__vector_1>
       8:	0c 94 f6 02 	jmp	0x5ec	; 0x5ec <__vector_2>
       c:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
      10:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
      14:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
      18:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
      1c:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
      20:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
      24:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
      28:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
      2c:	0c 94 0c 03 	jmp	0x618	; 0x618 <__vector_11>
      30:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
      34:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
      38:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
      3c:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
      40:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
      44:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
      48:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
      4c:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
      50:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
      54:	23 09       	sbc	r18, r3
      56:	2d 09       	sbc	r18, r13
      58:	37 09       	sbc	r19, r7
      5a:	41 09       	sbc	r20, r1
      5c:	4b 09       	sbc	r20, r11
      5e:	55 09       	sbc	r21, r5
      60:	5f 09       	sbc	r21, r15
      62:	69 09       	sbc	r22, r9

00000064 <__ctors_end>:
      64:	11 24       	eor	r1, r1
      66:	1f be       	out	0x3f, r1	; 63
      68:	cf e5       	ldi	r28, 0x5F	; 95
      6a:	d8 e0       	ldi	r29, 0x08	; 8
      6c:	de bf       	out	0x3e, r29	; 62
      6e:	cd bf       	out	0x3d, r28	; 61

00000070 <__do_clear_bss>:
      70:	20 e0       	ldi	r18, 0x00	; 0
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	01 c0       	rjmp	.+2      	; 0x7a <.do_clear_bss_start>

00000078 <.do_clear_bss_loop>:
      78:	1d 92       	st	X+, r1

0000007a <.do_clear_bss_start>:
      7a:	a3 36       	cpi	r26, 0x63	; 99
      7c:	b2 07       	cpc	r27, r18
      7e:	e1 f7       	brne	.-8      	; 0x78 <.do_clear_bss_loop>
      80:	0e 94 4f 00 	call	0x9e	; 0x9e <main>
      84:	0c 94 a2 09 	jmp	0x1344	; 0x1344 <_exit>

00000088 <__bad_interrupt>:
      88:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000008c <LED_INIT>:
{
	uint8_t PIN_NUM;
	DIO_PORT_TYPE PORT;
	PORT=PIN/8;
	PIN_NUM=PIN%8;
	if(PORT>4)
      8c:	88 32       	cpi	r24, 0x28	; 40
      8e:	28 f4       	brcc	.+10     	; 0x9a <LED_INIT+0xe>
	{
		return INVLAID_LED_PIN_NUMBER;
	}
	else
	{
		DIO_INITPIN(PIN,OUTPUT);
      90:	60 e0       	ldi	r22, 0x00	; 0
      92:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_INITPIN>
		return VALID_LED;
      96:	80 e0       	ldi	r24, 0x00	; 0
      98:	08 95       	ret
	DIO_PORT_TYPE PORT;
	PORT=PIN/8;
	PIN_NUM=PIN%8;
	if(PORT>4)
	{
		return INVALID_LED_PORT;
      9a:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		DIO_INITPIN(PIN,OUTPUT);
		return VALID_LED;
	}
}
      9c:	08 95       	ret

0000009e <main>:
#include "MCAL/TIMER/TIMER.h"

int main(void)
{
	/**********intializing LED& DIO*************/
	LED_INIT(pina0);
      9e:	80 e0       	ldi	r24, 0x00	; 0
      a0:	0e 94 46 00 	call	0x8c	; 0x8c <LED_INIT>
	LED_INIT(pina1);
      a4:	81 e0       	ldi	r24, 0x01	; 1
      a6:	0e 94 46 00 	call	0x8c	; 0x8c <LED_INIT>
	LED_INIT(pina2);
      aa:	82 e0       	ldi	r24, 0x02	; 2
      ac:	0e 94 46 00 	call	0x8c	; 0x8c <LED_INIT>
	LED_INIT(pina3);
      b0:	83 e0       	ldi	r24, 0x03	; 3
      b2:	0e 94 46 00 	call	0x8c	; 0x8c <LED_INIT>
	DIO_INITPIN(pind2,INPLUP);
      b6:	62 e0       	ldi	r22, 0x02	; 2
      b8:	8a e1       	ldi	r24, 0x1A	; 26
      ba:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_INITPIN>
	DIO_INITPIN(pind3,INPLUP);
      be:	62 e0       	ldi	r22, 0x02	; 2
      c0:	8b e1       	ldi	r24, 0x1B	; 27
      c2:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_INITPIN>
	/*****************INTIALIZING INTERRUPT***********/
	sei();
      c6:	78 94       	sei
	EXI_TriggerEdge(EX_INT0,LOW_LEVEL);
      c8:	60 e0       	ldi	r22, 0x00	; 0
      ca:	80 e0       	ldi	r24, 0x00	; 0
      cc:	0e 94 84 02 	call	0x508	; 0x508 <EXI_TriggerEdge>
	EXI_TriggerEdge(EX_INT1,LOW_LEVEL);
      d0:	60 e0       	ldi	r22, 0x00	; 0
      d2:	81 e0       	ldi	r24, 0x01	; 1
      d4:	0e 94 84 02 	call	0x508	; 0x508 <EXI_TriggerEdge>
	EXI_Enable(EX_INT0);
      d8:	80 e0       	ldi	r24, 0x00	; 0
      da:	0e 94 72 02 	call	0x4e4	; 0x4e4 <EXI_Enable>
	EXI_Enable(EX_INT1);
      de:	81 e0       	ldi	r24, 0x01	; 1
      e0:	0e 94 72 02 	call	0x4e4	; 0x4e4 <EXI_Enable>
	Timer0_Init(TIMER0_NORMAL_MODE,TIMER0_SCALER_64,OC0_DISCONNECTED);
      e4:	40 e0       	ldi	r20, 0x00	; 0
      e6:	63 e0       	ldi	r22, 0x03	; 3
      e8:	80 e0       	ldi	r24, 0x00	; 0
      ea:	0e 94 f5 08 	call	0x11ea	; 0x11ea <Timer0_Init>
	Timer0_OVF_InterrupEnable();
      ee:	0e 94 98 09 	call	0x1330	; 0x1330 <Timer0_OVF_InterrupEnable>
	timer0_SetCounter(6);
      f2:	86 e0       	ldi	r24, 0x06	; 6
      f4:	0e 94 96 09 	call	0x132c	; 0x132c <timer0_SetCounter>
      f8:	ff cf       	rjmp	.-2      	; 0xf8 <main+0x5a>

000000fa <DIO_INITPIN>:
			break;
			
		}
	}
	return Status;
}
      fa:	98 2f       	mov	r25, r24
      fc:	96 95       	lsr	r25
      fe:	96 95       	lsr	r25
     100:	96 95       	lsr	r25
     102:	95 30       	cpi	r25, 0x05	; 5
     104:	08 f0       	brcs	.+2      	; 0x108 <DIO_INITPIN+0xe>
     106:	05 c1       	rjmp	.+522    	; 0x312 <DIO_INITPIN+0x218>
     108:	87 70       	andi	r24, 0x07	; 7
     10a:	61 30       	cpi	r22, 0x01	; 1
     10c:	31 f0       	breq	.+12     	; 0x11a <DIO_INITPIN+0x20>
     10e:	08 f4       	brcc	.+2      	; 0x112 <DIO_INITPIN+0x18>
     110:	ac c0       	rjmp	.+344    	; 0x26a <DIO_INITPIN+0x170>
     112:	62 30       	cpi	r22, 0x02	; 2
     114:	09 f4       	brne	.+2      	; 0x118 <DIO_INITPIN+0x1e>
     116:	55 c0       	rjmp	.+170    	; 0x1c2 <DIO_INITPIN+0xc8>
     118:	fe c0       	rjmp	.+508    	; 0x316 <DIO_INITPIN+0x21c>
     11a:	91 30       	cpi	r25, 0x01	; 1
     11c:	c9 f0       	breq	.+50     	; 0x150 <DIO_INITPIN+0x56>
     11e:	28 f0       	brcs	.+10     	; 0x12a <DIO_INITPIN+0x30>
     120:	92 30       	cpi	r25, 0x02	; 2
     122:	49 f1       	breq	.+82     	; 0x176 <DIO_INITPIN+0x7c>
     124:	93 30       	cpi	r25, 0x03	; 3
     126:	d1 f1       	breq	.+116    	; 0x19c <DIO_INITPIN+0xa2>
     128:	f8 c0       	rjmp	.+496    	; 0x31a <DIO_INITPIN+0x220>
     12a:	4a b3       	in	r20, 0x1a	; 26
     12c:	21 e0       	ldi	r18, 0x01	; 1
     12e:	30 e0       	ldi	r19, 0x00	; 0
     130:	b9 01       	movw	r22, r18
     132:	02 c0       	rjmp	.+4      	; 0x138 <DIO_INITPIN+0x3e>
     134:	66 0f       	add	r22, r22
     136:	77 1f       	adc	r23, r23
     138:	8a 95       	dec	r24
     13a:	e2 f7       	brpl	.-8      	; 0x134 <DIO_INITPIN+0x3a>
     13c:	cb 01       	movw	r24, r22
     13e:	80 95       	com	r24
     140:	94 2f       	mov	r25, r20
     142:	98 23       	and	r25, r24
     144:	9a bb       	out	0x1a, r25	; 26
     146:	9b b3       	in	r25, 0x1b	; 27
     148:	89 23       	and	r24, r25
     14a:	8b bb       	out	0x1b, r24	; 27
     14c:	80 e0       	ldi	r24, 0x00	; 0
     14e:	08 95       	ret
     150:	47 b3       	in	r20, 0x17	; 23
     152:	21 e0       	ldi	r18, 0x01	; 1
     154:	30 e0       	ldi	r19, 0x00	; 0
     156:	b9 01       	movw	r22, r18
     158:	02 c0       	rjmp	.+4      	; 0x15e <DIO_INITPIN+0x64>
     15a:	66 0f       	add	r22, r22
     15c:	77 1f       	adc	r23, r23
     15e:	8a 95       	dec	r24
     160:	e2 f7       	brpl	.-8      	; 0x15a <DIO_INITPIN+0x60>
     162:	cb 01       	movw	r24, r22
     164:	80 95       	com	r24
     166:	94 2f       	mov	r25, r20
     168:	98 23       	and	r25, r24
     16a:	97 bb       	out	0x17, r25	; 23
     16c:	98 b3       	in	r25, 0x18	; 24
     16e:	89 23       	and	r24, r25
     170:	88 bb       	out	0x18, r24	; 24
     172:	80 e0       	ldi	r24, 0x00	; 0
     174:	08 95       	ret
     176:	44 b3       	in	r20, 0x14	; 20
     178:	21 e0       	ldi	r18, 0x01	; 1
     17a:	30 e0       	ldi	r19, 0x00	; 0
     17c:	b9 01       	movw	r22, r18
     17e:	02 c0       	rjmp	.+4      	; 0x184 <DIO_INITPIN+0x8a>
     180:	66 0f       	add	r22, r22
     182:	77 1f       	adc	r23, r23
     184:	8a 95       	dec	r24
     186:	e2 f7       	brpl	.-8      	; 0x180 <DIO_INITPIN+0x86>
     188:	cb 01       	movw	r24, r22
     18a:	80 95       	com	r24
     18c:	94 2f       	mov	r25, r20
     18e:	98 23       	and	r25, r24
     190:	94 bb       	out	0x14, r25	; 20
     192:	95 b3       	in	r25, 0x15	; 21
     194:	89 23       	and	r24, r25
     196:	85 bb       	out	0x15, r24	; 21
     198:	80 e0       	ldi	r24, 0x00	; 0
     19a:	08 95       	ret
     19c:	41 b3       	in	r20, 0x11	; 17
     19e:	21 e0       	ldi	r18, 0x01	; 1
     1a0:	30 e0       	ldi	r19, 0x00	; 0
     1a2:	b9 01       	movw	r22, r18
     1a4:	02 c0       	rjmp	.+4      	; 0x1aa <DIO_INITPIN+0xb0>
     1a6:	66 0f       	add	r22, r22
     1a8:	77 1f       	adc	r23, r23
     1aa:	8a 95       	dec	r24
     1ac:	e2 f7       	brpl	.-8      	; 0x1a6 <DIO_INITPIN+0xac>
     1ae:	cb 01       	movw	r24, r22
     1b0:	80 95       	com	r24
     1b2:	94 2f       	mov	r25, r20
     1b4:	98 23       	and	r25, r24
     1b6:	91 bb       	out	0x11, r25	; 17
     1b8:	92 b3       	in	r25, 0x12	; 18
     1ba:	89 23       	and	r24, r25
     1bc:	82 bb       	out	0x12, r24	; 18
     1be:	80 e0       	ldi	r24, 0x00	; 0
     1c0:	08 95       	ret
     1c2:	91 30       	cpi	r25, 0x01	; 1
     1c4:	c9 f0       	breq	.+50     	; 0x1f8 <DIO_INITPIN+0xfe>
     1c6:	28 f0       	brcs	.+10     	; 0x1d2 <DIO_INITPIN+0xd8>
     1c8:	92 30       	cpi	r25, 0x02	; 2
     1ca:	49 f1       	breq	.+82     	; 0x21e <DIO_INITPIN+0x124>
     1cc:	93 30       	cpi	r25, 0x03	; 3
     1ce:	d1 f1       	breq	.+116    	; 0x244 <DIO_INITPIN+0x14a>
     1d0:	a6 c0       	rjmp	.+332    	; 0x31e <DIO_INITPIN+0x224>
     1d2:	4a b3       	in	r20, 0x1a	; 26
     1d4:	21 e0       	ldi	r18, 0x01	; 1
     1d6:	30 e0       	ldi	r19, 0x00	; 0
     1d8:	b9 01       	movw	r22, r18
     1da:	02 c0       	rjmp	.+4      	; 0x1e0 <DIO_INITPIN+0xe6>
     1dc:	66 0f       	add	r22, r22
     1de:	77 1f       	adc	r23, r23
     1e0:	8a 95       	dec	r24
     1e2:	e2 f7       	brpl	.-8      	; 0x1dc <DIO_INITPIN+0xe2>
     1e4:	cb 01       	movw	r24, r22
     1e6:	96 2f       	mov	r25, r22
     1e8:	90 95       	com	r25
     1ea:	94 23       	and	r25, r20
     1ec:	9a bb       	out	0x1a, r25	; 26
     1ee:	9b b3       	in	r25, 0x1b	; 27
     1f0:	89 2b       	or	r24, r25
     1f2:	8b bb       	out	0x1b, r24	; 27
     1f4:	80 e0       	ldi	r24, 0x00	; 0
     1f6:	08 95       	ret
     1f8:	47 b3       	in	r20, 0x17	; 23
     1fa:	21 e0       	ldi	r18, 0x01	; 1
     1fc:	30 e0       	ldi	r19, 0x00	; 0
     1fe:	b9 01       	movw	r22, r18
     200:	02 c0       	rjmp	.+4      	; 0x206 <DIO_INITPIN+0x10c>
     202:	66 0f       	add	r22, r22
     204:	77 1f       	adc	r23, r23
     206:	8a 95       	dec	r24
     208:	e2 f7       	brpl	.-8      	; 0x202 <DIO_INITPIN+0x108>
     20a:	cb 01       	movw	r24, r22
     20c:	96 2f       	mov	r25, r22
     20e:	90 95       	com	r25
     210:	94 23       	and	r25, r20
     212:	97 bb       	out	0x17, r25	; 23
     214:	98 b3       	in	r25, 0x18	; 24
     216:	89 2b       	or	r24, r25
     218:	88 bb       	out	0x18, r24	; 24
     21a:	80 e0       	ldi	r24, 0x00	; 0
     21c:	08 95       	ret
     21e:	44 b3       	in	r20, 0x14	; 20
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	b9 01       	movw	r22, r18
     226:	02 c0       	rjmp	.+4      	; 0x22c <DIO_INITPIN+0x132>
     228:	66 0f       	add	r22, r22
     22a:	77 1f       	adc	r23, r23
     22c:	8a 95       	dec	r24
     22e:	e2 f7       	brpl	.-8      	; 0x228 <DIO_INITPIN+0x12e>
     230:	cb 01       	movw	r24, r22
     232:	96 2f       	mov	r25, r22
     234:	90 95       	com	r25
     236:	94 23       	and	r25, r20
     238:	94 bb       	out	0x14, r25	; 20
     23a:	95 b3       	in	r25, 0x15	; 21
     23c:	89 2b       	or	r24, r25
     23e:	85 bb       	out	0x15, r24	; 21
     240:	80 e0       	ldi	r24, 0x00	; 0
     242:	08 95       	ret
     244:	41 b3       	in	r20, 0x11	; 17
     246:	21 e0       	ldi	r18, 0x01	; 1
     248:	30 e0       	ldi	r19, 0x00	; 0
     24a:	b9 01       	movw	r22, r18
     24c:	02 c0       	rjmp	.+4      	; 0x252 <DIO_INITPIN+0x158>
     24e:	66 0f       	add	r22, r22
     250:	77 1f       	adc	r23, r23
     252:	8a 95       	dec	r24
     254:	e2 f7       	brpl	.-8      	; 0x24e <DIO_INITPIN+0x154>
     256:	cb 01       	movw	r24, r22
     258:	96 2f       	mov	r25, r22
     25a:	90 95       	com	r25
     25c:	94 23       	and	r25, r20
     25e:	91 bb       	out	0x11, r25	; 17
     260:	92 b3       	in	r25, 0x12	; 18
     262:	89 2b       	or	r24, r25
     264:	82 bb       	out	0x12, r24	; 18
     266:	80 e0       	ldi	r24, 0x00	; 0
     268:	08 95       	ret
     26a:	91 30       	cpi	r25, 0x01	; 1
     26c:	c9 f0       	breq	.+50     	; 0x2a0 <DIO_INITPIN+0x1a6>
     26e:	28 f0       	brcs	.+10     	; 0x27a <DIO_INITPIN+0x180>
     270:	92 30       	cpi	r25, 0x02	; 2
     272:	49 f1       	breq	.+82     	; 0x2c6 <DIO_INITPIN+0x1cc>
     274:	93 30       	cpi	r25, 0x03	; 3
     276:	d1 f1       	breq	.+116    	; 0x2ec <DIO_INITPIN+0x1f2>
     278:	54 c0       	rjmp	.+168    	; 0x322 <DIO_INITPIN+0x228>
     27a:	4b b3       	in	r20, 0x1b	; 27
     27c:	21 e0       	ldi	r18, 0x01	; 1
     27e:	30 e0       	ldi	r19, 0x00	; 0
     280:	b9 01       	movw	r22, r18
     282:	02 c0       	rjmp	.+4      	; 0x288 <DIO_INITPIN+0x18e>
     284:	66 0f       	add	r22, r22
     286:	77 1f       	adc	r23, r23
     288:	8a 95       	dec	r24
     28a:	e2 f7       	brpl	.-8      	; 0x284 <DIO_INITPIN+0x18a>
     28c:	cb 01       	movw	r24, r22
     28e:	96 2f       	mov	r25, r22
     290:	90 95       	com	r25
     292:	94 23       	and	r25, r20
     294:	9b bb       	out	0x1b, r25	; 27
     296:	9a b3       	in	r25, 0x1a	; 26
     298:	89 2b       	or	r24, r25
     29a:	8a bb       	out	0x1a, r24	; 26
     29c:	80 e0       	ldi	r24, 0x00	; 0
     29e:	08 95       	ret
     2a0:	48 b3       	in	r20, 0x18	; 24
     2a2:	21 e0       	ldi	r18, 0x01	; 1
     2a4:	30 e0       	ldi	r19, 0x00	; 0
     2a6:	b9 01       	movw	r22, r18
     2a8:	02 c0       	rjmp	.+4      	; 0x2ae <DIO_INITPIN+0x1b4>
     2aa:	66 0f       	add	r22, r22
     2ac:	77 1f       	adc	r23, r23
     2ae:	8a 95       	dec	r24
     2b0:	e2 f7       	brpl	.-8      	; 0x2aa <DIO_INITPIN+0x1b0>
     2b2:	cb 01       	movw	r24, r22
     2b4:	96 2f       	mov	r25, r22
     2b6:	90 95       	com	r25
     2b8:	94 23       	and	r25, r20
     2ba:	98 bb       	out	0x18, r25	; 24
     2bc:	97 b3       	in	r25, 0x17	; 23
     2be:	89 2b       	or	r24, r25
     2c0:	87 bb       	out	0x17, r24	; 23
     2c2:	80 e0       	ldi	r24, 0x00	; 0
     2c4:	08 95       	ret
     2c6:	45 b3       	in	r20, 0x15	; 21
     2c8:	21 e0       	ldi	r18, 0x01	; 1
     2ca:	30 e0       	ldi	r19, 0x00	; 0
     2cc:	b9 01       	movw	r22, r18
     2ce:	02 c0       	rjmp	.+4      	; 0x2d4 <DIO_INITPIN+0x1da>
     2d0:	66 0f       	add	r22, r22
     2d2:	77 1f       	adc	r23, r23
     2d4:	8a 95       	dec	r24
     2d6:	e2 f7       	brpl	.-8      	; 0x2d0 <DIO_INITPIN+0x1d6>
     2d8:	cb 01       	movw	r24, r22
     2da:	96 2f       	mov	r25, r22
     2dc:	90 95       	com	r25
     2de:	94 23       	and	r25, r20
     2e0:	95 bb       	out	0x15, r25	; 21
     2e2:	94 b3       	in	r25, 0x14	; 20
     2e4:	89 2b       	or	r24, r25
     2e6:	84 bb       	out	0x14, r24	; 20
     2e8:	80 e0       	ldi	r24, 0x00	; 0
     2ea:	08 95       	ret
     2ec:	42 b3       	in	r20, 0x12	; 18
     2ee:	21 e0       	ldi	r18, 0x01	; 1
     2f0:	30 e0       	ldi	r19, 0x00	; 0
     2f2:	b9 01       	movw	r22, r18
     2f4:	02 c0       	rjmp	.+4      	; 0x2fa <DIO_INITPIN+0x200>
     2f6:	66 0f       	add	r22, r22
     2f8:	77 1f       	adc	r23, r23
     2fa:	8a 95       	dec	r24
     2fc:	e2 f7       	brpl	.-8      	; 0x2f6 <DIO_INITPIN+0x1fc>
     2fe:	cb 01       	movw	r24, r22
     300:	96 2f       	mov	r25, r22
     302:	90 95       	com	r25
     304:	94 23       	and	r25, r20
     306:	92 bb       	out	0x12, r25	; 18
     308:	91 b3       	in	r25, 0x11	; 17
     30a:	89 2b       	or	r24, r25
     30c:	81 bb       	out	0x11, r24	; 17
     30e:	80 e0       	ldi	r24, 0x00	; 0
     310:	08 95       	ret
     312:	82 e0       	ldi	r24, 0x02	; 2
     314:	08 95       	ret
     316:	80 e0       	ldi	r24, 0x00	; 0
     318:	08 95       	ret
     31a:	82 e0       	ldi	r24, 0x02	; 2
     31c:	08 95       	ret
     31e:	82 e0       	ldi	r24, 0x02	; 2
     320:	08 95       	ret
     322:	82 e0       	ldi	r24, 0x02	; 2
     324:	08 95       	ret

00000326 <DIO_WRITEPIN>:
     326:	98 2f       	mov	r25, r24
     328:	96 95       	lsr	r25
     32a:	96 95       	lsr	r25
     32c:	96 95       	lsr	r25
     32e:	95 30       	cpi	r25, 0x05	; 5
     330:	08 f0       	brcs	.+2      	; 0x334 <DIO_WRITEPIN+0xe>
     332:	8d c0       	rjmp	.+282    	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
     334:	62 30       	cpi	r22, 0x02	; 2
     336:	08 f0       	brcs	.+2      	; 0x33a <DIO_WRITEPIN+0x14>
     338:	8c c0       	rjmp	.+280    	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
     33a:	87 70       	andi	r24, 0x07	; 7
     33c:	61 30       	cpi	r22, 0x01	; 1
     33e:	09 f0       	breq	.+2      	; 0x342 <DIO_WRITEPIN+0x1c>
     340:	40 c0       	rjmp	.+128    	; 0x3c2 <DIO_WRITEPIN+0x9c>
     342:	91 30       	cpi	r25, 0x01	; 1
     344:	a1 f0       	breq	.+40     	; 0x36e <DIO_WRITEPIN+0x48>
     346:	28 f0       	brcs	.+10     	; 0x352 <DIO_WRITEPIN+0x2c>
     348:	92 30       	cpi	r25, 0x02	; 2
     34a:	f9 f0       	breq	.+62     	; 0x38a <DIO_WRITEPIN+0x64>
     34c:	93 30       	cpi	r25, 0x03	; 3
     34e:	59 f1       	breq	.+86     	; 0x3a6 <DIO_WRITEPIN+0x80>
     350:	82 c0       	rjmp	.+260    	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
     352:	4b b3       	in	r20, 0x1b	; 27
     354:	21 e0       	ldi	r18, 0x01	; 1
     356:	30 e0       	ldi	r19, 0x00	; 0
     358:	b9 01       	movw	r22, r18
     35a:	02 c0       	rjmp	.+4      	; 0x360 <DIO_WRITEPIN+0x3a>
     35c:	66 0f       	add	r22, r22
     35e:	77 1f       	adc	r23, r23
     360:	8a 95       	dec	r24
     362:	e2 f7       	brpl	.-8      	; 0x35c <DIO_WRITEPIN+0x36>
     364:	cb 01       	movw	r24, r22
     366:	84 2b       	or	r24, r20
     368:	8b bb       	out	0x1b, r24	; 27
     36a:	80 e0       	ldi	r24, 0x00	; 0
     36c:	08 95       	ret
     36e:	48 b3       	in	r20, 0x18	; 24
     370:	21 e0       	ldi	r18, 0x01	; 1
     372:	30 e0       	ldi	r19, 0x00	; 0
     374:	b9 01       	movw	r22, r18
     376:	02 c0       	rjmp	.+4      	; 0x37c <DIO_WRITEPIN+0x56>
     378:	66 0f       	add	r22, r22
     37a:	77 1f       	adc	r23, r23
     37c:	8a 95       	dec	r24
     37e:	e2 f7       	brpl	.-8      	; 0x378 <DIO_WRITEPIN+0x52>
     380:	cb 01       	movw	r24, r22
     382:	84 2b       	or	r24, r20
     384:	88 bb       	out	0x18, r24	; 24
     386:	80 e0       	ldi	r24, 0x00	; 0
     388:	08 95       	ret
     38a:	45 b3       	in	r20, 0x15	; 21
     38c:	21 e0       	ldi	r18, 0x01	; 1
     38e:	30 e0       	ldi	r19, 0x00	; 0
     390:	b9 01       	movw	r22, r18
     392:	02 c0       	rjmp	.+4      	; 0x398 <DIO_WRITEPIN+0x72>
     394:	66 0f       	add	r22, r22
     396:	77 1f       	adc	r23, r23
     398:	8a 95       	dec	r24
     39a:	e2 f7       	brpl	.-8      	; 0x394 <DIO_WRITEPIN+0x6e>
     39c:	cb 01       	movw	r24, r22
     39e:	84 2b       	or	r24, r20
     3a0:	85 bb       	out	0x15, r24	; 21
     3a2:	80 e0       	ldi	r24, 0x00	; 0
     3a4:	08 95       	ret
     3a6:	42 b3       	in	r20, 0x12	; 18
     3a8:	21 e0       	ldi	r18, 0x01	; 1
     3aa:	30 e0       	ldi	r19, 0x00	; 0
     3ac:	b9 01       	movw	r22, r18
     3ae:	02 c0       	rjmp	.+4      	; 0x3b4 <DIO_WRITEPIN+0x8e>
     3b0:	66 0f       	add	r22, r22
     3b2:	77 1f       	adc	r23, r23
     3b4:	8a 95       	dec	r24
     3b6:	e2 f7       	brpl	.-8      	; 0x3b0 <DIO_WRITEPIN+0x8a>
     3b8:	cb 01       	movw	r24, r22
     3ba:	84 2b       	or	r24, r20
     3bc:	82 bb       	out	0x12, r24	; 18
     3be:	80 e0       	ldi	r24, 0x00	; 0
     3c0:	08 95       	ret
     3c2:	61 11       	cpse	r22, r1
     3c4:	4a c0       	rjmp	.+148    	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
     3c6:	91 30       	cpi	r25, 0x01	; 1
     3c8:	a9 f0       	breq	.+42     	; 0x3f4 <DIO_WRITEPIN+0xce>
     3ca:	28 f0       	brcs	.+10     	; 0x3d6 <DIO_WRITEPIN+0xb0>
     3cc:	92 30       	cpi	r25, 0x02	; 2
     3ce:	09 f1       	breq	.+66     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
     3d0:	93 30       	cpi	r25, 0x03	; 3
     3d2:	71 f1       	breq	.+92     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
     3d4:	44 c0       	rjmp	.+136    	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
     3d6:	4b b3       	in	r20, 0x1b	; 27
     3d8:	21 e0       	ldi	r18, 0x01	; 1
     3da:	30 e0       	ldi	r19, 0x00	; 0
     3dc:	b9 01       	movw	r22, r18
     3de:	02 c0       	rjmp	.+4      	; 0x3e4 <DIO_WRITEPIN+0xbe>
     3e0:	66 0f       	add	r22, r22
     3e2:	77 1f       	adc	r23, r23
     3e4:	8a 95       	dec	r24
     3e6:	e2 f7       	brpl	.-8      	; 0x3e0 <DIO_WRITEPIN+0xba>
     3e8:	cb 01       	movw	r24, r22
     3ea:	80 95       	com	r24
     3ec:	84 23       	and	r24, r20
     3ee:	8b bb       	out	0x1b, r24	; 27
     3f0:	80 e0       	ldi	r24, 0x00	; 0
     3f2:	08 95       	ret
     3f4:	48 b3       	in	r20, 0x18	; 24
     3f6:	21 e0       	ldi	r18, 0x01	; 1
     3f8:	30 e0       	ldi	r19, 0x00	; 0
     3fa:	b9 01       	movw	r22, r18
     3fc:	02 c0       	rjmp	.+4      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
     3fe:	66 0f       	add	r22, r22
     400:	77 1f       	adc	r23, r23
     402:	8a 95       	dec	r24
     404:	e2 f7       	brpl	.-8      	; 0x3fe <DIO_WRITEPIN+0xd8>
     406:	cb 01       	movw	r24, r22
     408:	80 95       	com	r24
     40a:	84 23       	and	r24, r20
     40c:	88 bb       	out	0x18, r24	; 24
     40e:	80 e0       	ldi	r24, 0x00	; 0
     410:	08 95       	ret
     412:	45 b3       	in	r20, 0x15	; 21
     414:	21 e0       	ldi	r18, 0x01	; 1
     416:	30 e0       	ldi	r19, 0x00	; 0
     418:	b9 01       	movw	r22, r18
     41a:	02 c0       	rjmp	.+4      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
     41c:	66 0f       	add	r22, r22
     41e:	77 1f       	adc	r23, r23
     420:	8a 95       	dec	r24
     422:	e2 f7       	brpl	.-8      	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
     424:	cb 01       	movw	r24, r22
     426:	80 95       	com	r24
     428:	84 23       	and	r24, r20
     42a:	85 bb       	out	0x15, r24	; 21
     42c:	80 e0       	ldi	r24, 0x00	; 0
     42e:	08 95       	ret
     430:	42 b3       	in	r20, 0x12	; 18
     432:	21 e0       	ldi	r18, 0x01	; 1
     434:	30 e0       	ldi	r19, 0x00	; 0
     436:	b9 01       	movw	r22, r18
     438:	02 c0       	rjmp	.+4      	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
     43a:	66 0f       	add	r22, r22
     43c:	77 1f       	adc	r23, r23
     43e:	8a 95       	dec	r24
     440:	e2 f7       	brpl	.-8      	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
     442:	cb 01       	movw	r24, r22
     444:	80 95       	com	r24
     446:	84 23       	and	r24, r20
     448:	82 bb       	out	0x12, r24	; 18
     44a:	80 e0       	ldi	r24, 0x00	; 0
     44c:	08 95       	ret
     44e:	82 e0       	ldi	r24, 0x02	; 2
     450:	08 95       	ret
     452:	83 e0       	ldi	r24, 0x03	; 3
     454:	08 95       	ret
     456:	82 e0       	ldi	r24, 0x02	; 2
     458:	08 95       	ret
     45a:	80 e0       	ldi	r24, 0x00	; 0
     45c:	08 95       	ret
     45e:	82 e0       	ldi	r24, 0x02	; 2
     460:	08 95       	ret

00000462 <DIO_TogglePin>:
this function toggels the pin from high to low or vise versa 
**/

void DIO_TogglePin(uint8_t pin)
{
	uint8_t pin_num =pin%8;
     462:	98 2f       	mov	r25, r24
     464:	97 70       	andi	r25, 0x07	; 7
	uint8_t  port= pin/8;
	switch (port)
     466:	86 95       	lsr	r24
     468:	86 95       	lsr	r24
     46a:	86 95       	lsr	r24
     46c:	81 30       	cpi	r24, 0x01	; 1
     46e:	99 f0       	breq	.+38     	; 0x496 <DIO_TogglePin+0x34>
     470:	28 f0       	brcs	.+10     	; 0x47c <DIO_TogglePin+0x1a>
     472:	82 30       	cpi	r24, 0x02	; 2
     474:	e9 f0       	breq	.+58     	; 0x4b0 <DIO_TogglePin+0x4e>
     476:	83 30       	cpi	r24, 0x03	; 3
     478:	41 f1       	breq	.+80     	; 0x4ca <DIO_TogglePin+0x68>
     47a:	08 95       	ret
	{
		case PA:
		{
			toggel_bit(PORTA,pin_num);	
     47c:	4b b3       	in	r20, 0x1b	; 27
     47e:	21 e0       	ldi	r18, 0x01	; 1
     480:	30 e0       	ldi	r19, 0x00	; 0
     482:	b9 01       	movw	r22, r18
     484:	02 c0       	rjmp	.+4      	; 0x48a <DIO_TogglePin+0x28>
     486:	66 0f       	add	r22, r22
     488:	77 1f       	adc	r23, r23
     48a:	9a 95       	dec	r25
     48c:	e2 f7       	brpl	.-8      	; 0x486 <DIO_TogglePin+0x24>
     48e:	cb 01       	movw	r24, r22
     490:	84 27       	eor	r24, r20
     492:	8b bb       	out	0x1b, r24	; 27
		} 
		 break;
     494:	08 95       	ret
		 
		case PB:
		{
			toggel_bit(PORTB,pin_num);
     496:	48 b3       	in	r20, 0x18	; 24
     498:	21 e0       	ldi	r18, 0x01	; 1
     49a:	30 e0       	ldi	r19, 0x00	; 0
     49c:	b9 01       	movw	r22, r18
     49e:	02 c0       	rjmp	.+4      	; 0x4a4 <DIO_TogglePin+0x42>
     4a0:	66 0f       	add	r22, r22
     4a2:	77 1f       	adc	r23, r23
     4a4:	9a 95       	dec	r25
     4a6:	e2 f7       	brpl	.-8      	; 0x4a0 <DIO_TogglePin+0x3e>
     4a8:	cb 01       	movw	r24, r22
     4aa:	84 27       	eor	r24, r20
     4ac:	88 bb       	out	0x18, r24	; 24
		} 
		 break;
     4ae:	08 95       	ret
		 
		case PC:
		 {
			toggel_bit(PORTC,pin_num);
     4b0:	45 b3       	in	r20, 0x15	; 21
     4b2:	21 e0       	ldi	r18, 0x01	; 1
     4b4:	30 e0       	ldi	r19, 0x00	; 0
     4b6:	b9 01       	movw	r22, r18
     4b8:	02 c0       	rjmp	.+4      	; 0x4be <DIO_TogglePin+0x5c>
     4ba:	66 0f       	add	r22, r22
     4bc:	77 1f       	adc	r23, r23
     4be:	9a 95       	dec	r25
     4c0:	e2 f7       	brpl	.-8      	; 0x4ba <DIO_TogglePin+0x58>
     4c2:	cb 01       	movw	r24, r22
     4c4:	84 27       	eor	r24, r20
     4c6:	85 bb       	out	0x15, r24	; 21
		 }
		 break;
     4c8:	08 95       	ret
		 
		case PD:
		{
			 toggel_bit(PORTD,pin_num); 
     4ca:	42 b3       	in	r20, 0x12	; 18
     4cc:	21 e0       	ldi	r18, 0x01	; 1
     4ce:	30 e0       	ldi	r19, 0x00	; 0
     4d0:	b9 01       	movw	r22, r18
     4d2:	02 c0       	rjmp	.+4      	; 0x4d8 <DIO_TogglePin+0x76>
     4d4:	66 0f       	add	r22, r22
     4d6:	77 1f       	adc	r23, r23
     4d8:	9a 95       	dec	r25
     4da:	e2 f7       	brpl	.-8      	; 0x4d4 <DIO_TogglePin+0x72>
     4dc:	cb 01       	movw	r24, r22
     4de:	84 27       	eor	r24, r20
     4e0:	82 bb       	out	0x12, r24	; 18
     4e2:	08 95       	ret

000004e4 <EXI_Enable>:
		clear_bit(GICR,INT1); break;
		case EX_INT2:
		clear_bit(GICR,INT2); break;
	}
	
}
     4e4:	81 30       	cpi	r24, 0x01	; 1
     4e6:	41 f0       	breq	.+16     	; 0x4f8 <EXI_Enable+0x14>
     4e8:	18 f0       	brcs	.+6      	; 0x4f0 <EXI_Enable+0xc>
     4ea:	82 30       	cpi	r24, 0x02	; 2
     4ec:	49 f0       	breq	.+18     	; 0x500 <EXI_Enable+0x1c>
     4ee:	08 95       	ret
     4f0:	8b b7       	in	r24, 0x3b	; 59
     4f2:	80 64       	ori	r24, 0x40	; 64
     4f4:	8b bf       	out	0x3b, r24	; 59
     4f6:	08 95       	ret
     4f8:	8b b7       	in	r24, 0x3b	; 59
     4fa:	80 68       	ori	r24, 0x80	; 128
     4fc:	8b bf       	out	0x3b, r24	; 59
     4fe:	08 95       	ret
     500:	8b b7       	in	r24, 0x3b	; 59
     502:	80 62       	ori	r24, 0x20	; 32
     504:	8b bf       	out	0x3b, r24	; 59
     506:	08 95       	ret

00000508 <EXI_TriggerEdge>:

/*it defines the trigger state of the interrupt*/
INTERRUPT_ERROR_TYPE EXI_TriggerEdge (EXInterruptSource_type interrupt, TriggerEdge_type edge )
{

	switch(interrupt)
     508:	81 30       	cpi	r24, 0x01	; 1
     50a:	49 f1       	breq	.+82     	; 0x55e <EXI_TriggerEdge+0x56>
     50c:	20 f0       	brcs	.+8      	; 0x516 <EXI_TriggerEdge+0xe>
     50e:	82 30       	cpi	r24, 0x02	; 2
     510:	09 f4       	brne	.+2      	; 0x514 <EXI_TriggerEdge+0xc>
     512:	49 c0       	rjmp	.+146    	; 0x5a6 <EXI_TriggerEdge+0x9e>
     514:	08 95       	ret
	{
		case EX_INT0:
		switch(edge)
     516:	61 30       	cpi	r22, 0x01	; 1
     518:	69 f0       	breq	.+26     	; 0x534 <EXI_TriggerEdge+0x2c>
     51a:	28 f0       	brcs	.+10     	; 0x526 <EXI_TriggerEdge+0x1e>
     51c:	62 30       	cpi	r22, 0x02	; 2
     51e:	89 f0       	breq	.+34     	; 0x542 <EXI_TriggerEdge+0x3a>
     520:	63 30       	cpi	r22, 0x03	; 3
     522:	b1 f0       	breq	.+44     	; 0x550 <EXI_TriggerEdge+0x48>
     524:	08 95       	ret
		{
			case LOW_LEVEL:
			clear_bit(MCUCR,ISC00);
     526:	85 b7       	in	r24, 0x35	; 53
     528:	8e 7f       	andi	r24, 0xFE	; 254
     52a:	85 bf       	out	0x35, r24	; 53
			clear_bit(MCUCR,ISC01);
     52c:	85 b7       	in	r24, 0x35	; 53
     52e:	8d 7f       	andi	r24, 0xFD	; 253
     530:	85 bf       	out	0x35, r24	; 53
			break;
     532:	08 95       	ret
			case ANY_LOGIC_CHANGE:
			set_bit(MCUCR,ISC00);
     534:	85 b7       	in	r24, 0x35	; 53
     536:	81 60       	ori	r24, 0x01	; 1
     538:	85 bf       	out	0x35, r24	; 53
			clear_bit(MCUCR,ISC01); 
     53a:	85 b7       	in	r24, 0x35	; 53
     53c:	8d 7f       	andi	r24, 0xFD	; 253
     53e:	85 bf       	out	0x35, r24	; 53
			break;
     540:	08 95       	ret
			case FALLING_EDGE:
			clear_bit(MCUCR,ISC00);
     542:	85 b7       	in	r24, 0x35	; 53
     544:	8e 7f       	andi	r24, 0xFE	; 254
     546:	85 bf       	out	0x35, r24	; 53
			set_bit(MCUCR,ISC01);
     548:	85 b7       	in	r24, 0x35	; 53
     54a:	82 60       	ori	r24, 0x02	; 2
     54c:	85 bf       	out	0x35, r24	; 53
			 break;
     54e:	08 95       	ret
			case RISING_EDGE:
			set_bit(MCUCR,ISC00);
     550:	85 b7       	in	r24, 0x35	; 53
     552:	81 60       	ori	r24, 0x01	; 1
     554:	85 bf       	out	0x35, r24	; 53
			set_bit(MCUCR,ISC01);
     556:	85 b7       	in	r24, 0x35	; 53
     558:	82 60       	ori	r24, 0x02	; 2
     55a:	85 bf       	out	0x35, r24	; 53
			 break;
     55c:	08 95       	ret
		}
		break;
		case EX_INT1:
		switch(edge)
     55e:	61 30       	cpi	r22, 0x01	; 1
     560:	69 f0       	breq	.+26     	; 0x57c <EXI_TriggerEdge+0x74>
     562:	28 f0       	brcs	.+10     	; 0x56e <EXI_TriggerEdge+0x66>
     564:	62 30       	cpi	r22, 0x02	; 2
     566:	89 f0       	breq	.+34     	; 0x58a <EXI_TriggerEdge+0x82>
     568:	63 30       	cpi	r22, 0x03	; 3
     56a:	b1 f0       	breq	.+44     	; 0x598 <EXI_TriggerEdge+0x90>
     56c:	08 95       	ret
		{
			case LOW_LEVEL:
			clear_bit(MCUCR,ISC10);
     56e:	85 b7       	in	r24, 0x35	; 53
     570:	8b 7f       	andi	r24, 0xFB	; 251
     572:	85 bf       	out	0x35, r24	; 53
			clear_bit(MCUCR,ISC11); break;
     574:	85 b7       	in	r24, 0x35	; 53
     576:	87 7f       	andi	r24, 0xF7	; 247
     578:	85 bf       	out	0x35, r24	; 53
     57a:	08 95       	ret
			case ANY_LOGIC_CHANGE:
			set_bit(MCUCR,ISC10);
     57c:	85 b7       	in	r24, 0x35	; 53
     57e:	84 60       	ori	r24, 0x04	; 4
     580:	85 bf       	out	0x35, r24	; 53
			clear_bit(MCUCR,ISC11); break;
     582:	85 b7       	in	r24, 0x35	; 53
     584:	87 7f       	andi	r24, 0xF7	; 247
     586:	85 bf       	out	0x35, r24	; 53
     588:	08 95       	ret
			case FALLING_EDGE:
			clear_bit(MCUCR,ISC10);
     58a:	85 b7       	in	r24, 0x35	; 53
     58c:	8b 7f       	andi	r24, 0xFB	; 251
     58e:	85 bf       	out	0x35, r24	; 53
			set_bit(MCUCR,ISC11); break;
     590:	85 b7       	in	r24, 0x35	; 53
     592:	88 60       	ori	r24, 0x08	; 8
     594:	85 bf       	out	0x35, r24	; 53
     596:	08 95       	ret
			case RISING_EDGE:
			set_bit(MCUCR,ISC10);
     598:	85 b7       	in	r24, 0x35	; 53
     59a:	84 60       	ori	r24, 0x04	; 4
     59c:	85 bf       	out	0x35, r24	; 53
			set_bit(MCUCR,ISC11); break;
     59e:	85 b7       	in	r24, 0x35	; 53
     5a0:	88 60       	ori	r24, 0x08	; 8
     5a2:	85 bf       	out	0x35, r24	; 53
     5a4:	08 95       	ret
		}
		break;
		case EX_INT2:
		switch(edge)
     5a6:	62 30       	cpi	r22, 0x02	; 2
     5a8:	19 f0       	breq	.+6      	; 0x5b0 <EXI_TriggerEdge+0xa8>
     5aa:	63 30       	cpi	r22, 0x03	; 3
     5ac:	29 f0       	breq	.+10     	; 0x5b8 <EXI_TriggerEdge+0xb0>
     5ae:	08 95       	ret
			break;
			case  ANY_LOGIC_CHANGE:
		 /*DO nothing OR set default */
			break;
			case FALLING_EDGE:
			clear_bit(MCUCSR,ISC2);
     5b0:	84 b7       	in	r24, 0x34	; 52
     5b2:	8f 7b       	andi	r24, 0xBF	; 191
     5b4:	84 bf       	out	0x34, r24	; 52
			 break;
     5b6:	08 95       	ret
			case RISING_EDGE:
			set_bit(MCUCSR,ISC2); 
     5b8:	84 b7       	in	r24, 0x34	; 52
     5ba:	80 64       	ori	r24, 0x40	; 64
     5bc:	84 bf       	out	0x34, r24	; 52
			break;
		}
		break;
	}
	
}
     5be:	08 95       	ret

000005c0 <__vector_1>:
*/



ISR(INT0_VECTOR)
{    
     5c0:	1f 92       	push	r1
     5c2:	0f 92       	push	r0
     5c4:	0f b6       	in	r0, 0x3f	; 63
     5c6:	0f 92       	push	r0
     5c8:	11 24       	eor	r1, r1
     5ca:	8f 93       	push	r24
	FLAG++;                 
     5cc:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <FLAG>
     5d0:	8f 5f       	subi	r24, 0xFF	; 255
	 if(FLAG==8)
     5d2:	88 30       	cpi	r24, 0x08	; 8
     5d4:	19 f0       	breq	.+6      	; 0x5dc <__vector_1+0x1c>



ISR(INT0_VECTOR)
{    
	FLAG++;                 
     5d6:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <FLAG>
     5da:	02 c0       	rjmp	.+4      	; 0x5e0 <__vector_1+0x20>
	 if(FLAG==8)
	{
		FLAG=0;
     5dc:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <FLAG>
	}
	
}
     5e0:	8f 91       	pop	r24
     5e2:	0f 90       	pop	r0
     5e4:	0f be       	out	0x3f, r0	; 63
     5e6:	0f 90       	pop	r0
     5e8:	1f 90       	pop	r1
     5ea:	18 95       	reti

000005ec <__vector_2>:

ISR(INT1_VECTOR)
{
     5ec:	1f 92       	push	r1
     5ee:	0f 92       	push	r0
     5f0:	0f b6       	in	r0, 0x3f	; 63
     5f2:	0f 92       	push	r0
     5f4:	11 24       	eor	r1, r1
     5f6:	8f 93       	push	r24
	blink_mode++;
     5f8:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <blink_mode>
     5fc:	8f 5f       	subi	r24, 0xFF	; 255
	if(blink_mode==5)
     5fe:	85 30       	cpi	r24, 0x05	; 5
     600:	19 f0       	breq	.+6      	; 0x608 <__vector_2+0x1c>
	
}

ISR(INT1_VECTOR)
{
	blink_mode++;
     602:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <blink_mode>
     606:	02 c0       	rjmp	.+4      	; 0x60c <__vector_2+0x20>
	if(blink_mode==5)
	{
		blink_mode=0;
     608:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <blink_mode>
	}
}
     60c:	8f 91       	pop	r24
     60e:	0f 90       	pop	r0
     610:	0f be       	out	0x3f, r0	; 63
     612:	0f 90       	pop	r0
     614:	1f 90       	pop	r1
     616:	18 95       	reti

00000618 <__vector_11>:

ISR(TIMER0_OVF_VECTOR)
{
     618:	1f 92       	push	r1
     61a:	0f 92       	push	r0
     61c:	0f b6       	in	r0, 0x3f	; 63
     61e:	0f 92       	push	r0
     620:	11 24       	eor	r1, r1
     622:	2f 93       	push	r18
     624:	3f 93       	push	r19
     626:	4f 93       	push	r20
     628:	5f 93       	push	r21
     62a:	6f 93       	push	r22
     62c:	7f 93       	push	r23
     62e:	8f 93       	push	r24
     630:	9f 93       	push	r25
     632:	af 93       	push	r26
     634:	bf 93       	push	r27
     636:	ef 93       	push	r30
     638:	ff 93       	push	r31
	
	if(blink_mode==0)
     63a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <blink_mode>
     63e:	81 11       	cpse	r24, r1
     640:	23 c1       	rjmp	.+582    	; 0x888 <__stack+0x29>
	{
		counter++;
     642:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
     646:	8f 5f       	subi	r24, 0xFF	; 255
     648:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
	if(FLAG==1)
     64c:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <FLAG>
     650:	91 30       	cpi	r25, 0x01	; 1
     652:	b9 f4       	brne	.+46     	; 0x682 <__vector_11+0x6a>
	{
		if( counter==5)
     654:	85 30       	cpi	r24, 0x05	; 5
     656:	49 f4       	brne	.+18     	; 0x66a <__vector_11+0x52>
	      {
			DIO_WRITEPIN(pina0,LOW);	
     658:	60 e0       	ldi	r22, 0x00	; 0
     65a:	80 e0       	ldi	r24, 0x00	; 0
     65c:	0e 94 93 01 	call	0x326	; 0x326 <DIO_WRITEPIN>
			timer0_SetCounter(6);
     660:	86 e0       	ldi	r24, 0x06	; 6
     662:	90 e0       	ldi	r25, 0x00	; 0
     664:	0e 94 96 09 	call	0x132c	; 0x132c <timer0_SetCounter>
     668:	0c c0       	rjmp	.+24     	; 0x682 <__vector_11+0x6a>
	        }
	else if(counter==60)
     66a:	8c 33       	cpi	r24, 0x3C	; 60
     66c:	09 f0       	breq	.+2      	; 0x670 <__vector_11+0x58>
     66e:	58 c0       	rjmp	.+176    	; 0x720 <__vector_11+0x108>
	       {
		DIO_TogglePin(pina0);
     670:	80 e0       	ldi	r24, 0x00	; 0
     672:	0e 94 31 02 	call	0x462	; 0x462 <DIO_TogglePin>
		counter=0;
     676:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
		timer0_SetCounter(6);
     67a:	86 e0       	ldi	r24, 0x06	; 6
     67c:	90 e0       	ldi	r25, 0x00	; 0
     67e:	0e 94 96 09 	call	0x132c	; 0x132c <timer0_SetCounter>
	     }
	}
	if(FLAG==2)
     682:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <FLAG>
     686:	82 30       	cpi	r24, 0x02	; 2
     688:	01 f5       	brne	.+64     	; 0x6ca <__vector_11+0xb2>
	{
		if( counter==5)
     68a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
     68e:	85 30       	cpi	r24, 0x05	; 5
     690:	69 f4       	brne	.+26     	; 0x6ac <__vector_11+0x94>
		{
			DIO_WRITEPIN(pina1,LOW);
     692:	60 e0       	ldi	r22, 0x00	; 0
     694:	81 e0       	ldi	r24, 0x01	; 1
     696:	0e 94 93 01 	call	0x326	; 0x326 <DIO_WRITEPIN>
			DIO_WRITEPIN(pina0,LOW);
     69a:	60 e0       	ldi	r22, 0x00	; 0
     69c:	80 e0       	ldi	r24, 0x00	; 0
     69e:	0e 94 93 01 	call	0x326	; 0x326 <DIO_WRITEPIN>
			timer0_SetCounter(6);
     6a2:	86 e0       	ldi	r24, 0x06	; 6
     6a4:	90 e0       	ldi	r25, 0x00	; 0
     6a6:	0e 94 96 09 	call	0x132c	; 0x132c <timer0_SetCounter>
     6aa:	0f c0       	rjmp	.+30     	; 0x6ca <__vector_11+0xb2>
		}
		else if(counter==60)
     6ac:	8c 33       	cpi	r24, 0x3C	; 60
     6ae:	09 f0       	breq	.+2      	; 0x6b2 <__vector_11+0x9a>
     6b0:	69 c0       	rjmp	.+210    	; 0x784 <__vector_11+0x16c>
		{
			DIO_TogglePin(pina1);
     6b2:	81 e0       	ldi	r24, 0x01	; 1
     6b4:	0e 94 31 02 	call	0x462	; 0x462 <DIO_TogglePin>
			DIO_TogglePin(pina0);
     6b8:	80 e0       	ldi	r24, 0x00	; 0
     6ba:	0e 94 31 02 	call	0x462	; 0x462 <DIO_TogglePin>
			counter=0;
     6be:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
			timer0_SetCounter(6);
     6c2:	86 e0       	ldi	r24, 0x06	; 6
     6c4:	90 e0       	ldi	r25, 0x00	; 0
     6c6:	0e 94 96 09 	call	0x132c	; 0x132c <timer0_SetCounter>
		}
	}
	if(FLAG==3)
     6ca:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <FLAG>
     6ce:	83 30       	cpi	r24, 0x03	; 3
     6d0:	39 f5       	brne	.+78     	; 0x720 <__vector_11+0x108>
	{
		if( counter==5)
     6d2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
     6d6:	85 30       	cpi	r24, 0x05	; 5
     6d8:	89 f4       	brne	.+34     	; 0x6fc <__vector_11+0xe4>
		{
			DIO_WRITEPIN(pina2,LOW);
     6da:	60 e0       	ldi	r22, 0x00	; 0
     6dc:	82 e0       	ldi	r24, 0x02	; 2
     6de:	0e 94 93 01 	call	0x326	; 0x326 <DIO_WRITEPIN>
			DIO_WRITEPIN(pina1,LOW);
     6e2:	60 e0       	ldi	r22, 0x00	; 0
     6e4:	81 e0       	ldi	r24, 0x01	; 1
     6e6:	0e 94 93 01 	call	0x326	; 0x326 <DIO_WRITEPIN>
			DIO_WRITEPIN(pina0,LOW);
     6ea:	60 e0       	ldi	r22, 0x00	; 0
     6ec:	80 e0       	ldi	r24, 0x00	; 0
     6ee:	0e 94 93 01 	call	0x326	; 0x326 <DIO_WRITEPIN>
			timer0_SetCounter(6);
     6f2:	86 e0       	ldi	r24, 0x06	; 6
     6f4:	90 e0       	ldi	r25, 0x00	; 0
     6f6:	0e 94 96 09 	call	0x132c	; 0x132c <timer0_SetCounter>
     6fa:	12 c0       	rjmp	.+36     	; 0x720 <__vector_11+0x108>
		}
		else if(counter==60)
     6fc:	8c 33       	cpi	r24, 0x3C	; 60
     6fe:	09 f0       	breq	.+2      	; 0x702 <__vector_11+0xea>
     700:	70 c0       	rjmp	.+224    	; 0x7e2 <__vector_11+0x1ca>
		{
			DIO_TogglePin(pina2);
     702:	82 e0       	ldi	r24, 0x02	; 2
     704:	0e 94 31 02 	call	0x462	; 0x462 <DIO_TogglePin>
			DIO_TogglePin(pina1);
     708:	81 e0       	ldi	r24, 0x01	; 1
     70a:	0e 94 31 02 	call	0x462	; 0x462 <DIO_TogglePin>
			DIO_TogglePin(pina0);
     70e:	80 e0       	ldi	r24, 0x00	; 0
     710:	0e 94 31 02 	call	0x462	; 0x462 <DIO_TogglePin>
			counter=0;
     714:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
			timer0_SetCounter(6);
     718:	86 e0       	ldi	r24, 0x06	; 6
     71a:	90 e0       	ldi	r25, 0x00	; 0
     71c:	0e 94 96 09 	call	0x132c	; 0x132c <timer0_SetCounter>
		}
	}
	if(FLAG==4)
     720:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <FLAG>
     724:	84 30       	cpi	r24, 0x04	; 4
     726:	71 f5       	brne	.+92     	; 0x784 <__vector_11+0x16c>
	{
		if( counter==5)
     728:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
     72c:	85 30       	cpi	r24, 0x05	; 5
     72e:	a9 f4       	brne	.+42     	; 0x75a <__vector_11+0x142>
		{
			DIO_WRITEPIN(pina3,LOW);
     730:	60 e0       	ldi	r22, 0x00	; 0
     732:	83 e0       	ldi	r24, 0x03	; 3
     734:	0e 94 93 01 	call	0x326	; 0x326 <DIO_WRITEPIN>
			DIO_WRITEPIN(pina2,LOW);
     738:	60 e0       	ldi	r22, 0x00	; 0
     73a:	82 e0       	ldi	r24, 0x02	; 2
     73c:	0e 94 93 01 	call	0x326	; 0x326 <DIO_WRITEPIN>
			DIO_WRITEPIN(pina1,LOW);
     740:	60 e0       	ldi	r22, 0x00	; 0
     742:	81 e0       	ldi	r24, 0x01	; 1
     744:	0e 94 93 01 	call	0x326	; 0x326 <DIO_WRITEPIN>
			DIO_WRITEPIN(pina0,LOW);
     748:	60 e0       	ldi	r22, 0x00	; 0
     74a:	80 e0       	ldi	r24, 0x00	; 0
     74c:	0e 94 93 01 	call	0x326	; 0x326 <DIO_WRITEPIN>
			timer0_SetCounter(6);
     750:	86 e0       	ldi	r24, 0x06	; 6
     752:	90 e0       	ldi	r25, 0x00	; 0
     754:	0e 94 96 09 	call	0x132c	; 0x132c <timer0_SetCounter>
     758:	15 c0       	rjmp	.+42     	; 0x784 <__vector_11+0x16c>
		}
		else if(counter==60)
     75a:	8c 33       	cpi	r24, 0x3C	; 60
     75c:	09 f0       	breq	.+2      	; 0x760 <__vector_11+0x148>
     75e:	6c c0       	rjmp	.+216    	; 0x838 <__vector_11+0x220>
		{
			DIO_TogglePin(pina3);
     760:	83 e0       	ldi	r24, 0x03	; 3
     762:	0e 94 31 02 	call	0x462	; 0x462 <DIO_TogglePin>
			DIO_TogglePin(pina2);
     766:	82 e0       	ldi	r24, 0x02	; 2
     768:	0e 94 31 02 	call	0x462	; 0x462 <DIO_TogglePin>
			DIO_TogglePin(pina1);
     76c:	81 e0       	ldi	r24, 0x01	; 1
     76e:	0e 94 31 02 	call	0x462	; 0x462 <DIO_TogglePin>
			DIO_TogglePin(pina0);
     772:	80 e0       	ldi	r24, 0x00	; 0
     774:	0e 94 31 02 	call	0x462	; 0x462 <DIO_TogglePin>
			counter=0;
     778:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
			timer0_SetCounter(6);
     77c:	86 e0       	ldi	r24, 0x06	; 6
     77e:	90 e0       	ldi	r25, 0x00	; 0
     780:	0e 94 96 09 	call	0x132c	; 0x132c <timer0_SetCounter>
		}
	}
	if(FLAG==5)
     784:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <FLAG>
     788:	85 30       	cpi	r24, 0x05	; 5
     78a:	59 f5       	brne	.+86     	; 0x7e2 <__vector_11+0x1ca>
	{
		if( counter==5)
     78c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
     790:	85 30       	cpi	r24, 0x05	; 5
     792:	a9 f4       	brne	.+42     	; 0x7be <__vector_11+0x1a6>
		{
			DIO_WRITEPIN(pina3,LOW);
     794:	60 e0       	ldi	r22, 0x00	; 0
     796:	83 e0       	ldi	r24, 0x03	; 3
     798:	0e 94 93 01 	call	0x326	; 0x326 <DIO_WRITEPIN>
			DIO_WRITEPIN(pina2,LOW);
     79c:	60 e0       	ldi	r22, 0x00	; 0
     79e:	82 e0       	ldi	r24, 0x02	; 2
     7a0:	0e 94 93 01 	call	0x326	; 0x326 <DIO_WRITEPIN>
			DIO_WRITEPIN(pina1,LOW);
     7a4:	60 e0       	ldi	r22, 0x00	; 0
     7a6:	81 e0       	ldi	r24, 0x01	; 1
     7a8:	0e 94 93 01 	call	0x326	; 0x326 <DIO_WRITEPIN>
			DIO_WRITEPIN(pina0,LOW);
     7ac:	60 e0       	ldi	r22, 0x00	; 0
     7ae:	80 e0       	ldi	r24, 0x00	; 0
     7b0:	0e 94 93 01 	call	0x326	; 0x326 <DIO_WRITEPIN>
			timer0_SetCounter(6);
     7b4:	86 e0       	ldi	r24, 0x06	; 6
     7b6:	90 e0       	ldi	r25, 0x00	; 0
     7b8:	0e 94 96 09 	call	0x132c	; 0x132c <timer0_SetCounter>
     7bc:	12 c0       	rjmp	.+36     	; 0x7e2 <__vector_11+0x1ca>
		}
		else if(counter==60)
     7be:	8c 33       	cpi	r24, 0x3C	; 60
     7c0:	09 f0       	breq	.+2      	; 0x7c4 <__vector_11+0x1ac>
     7c2:	62 c0       	rjmp	.+196    	; 0x888 <__stack+0x29>
		{
			DIO_TogglePin(pina3);
     7c4:	83 e0       	ldi	r24, 0x03	; 3
     7c6:	0e 94 31 02 	call	0x462	; 0x462 <DIO_TogglePin>
			DIO_TogglePin(pina2);
     7ca:	82 e0       	ldi	r24, 0x02	; 2
     7cc:	0e 94 31 02 	call	0x462	; 0x462 <DIO_TogglePin>
			DIO_TogglePin(pina1);
     7d0:	81 e0       	ldi	r24, 0x01	; 1
     7d2:	0e 94 31 02 	call	0x462	; 0x462 <DIO_TogglePin>
			counter=0;
     7d6:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
			timer0_SetCounter(6);
     7da:	86 e0       	ldi	r24, 0x06	; 6
     7dc:	90 e0       	ldi	r25, 0x00	; 0
     7de:	0e 94 96 09 	call	0x132c	; 0x132c <timer0_SetCounter>
		}
	}
	if(FLAG==6)
     7e2:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <FLAG>
     7e6:	86 30       	cpi	r24, 0x06	; 6
     7e8:	39 f5       	brne	.+78     	; 0x838 <__vector_11+0x220>
	{
		if( counter==5)
     7ea:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
     7ee:	85 30       	cpi	r24, 0x05	; 5
     7f0:	a9 f4       	brne	.+42     	; 0x81c <__vector_11+0x204>
		{
			DIO_WRITEPIN(pina3,LOW);
     7f2:	60 e0       	ldi	r22, 0x00	; 0
     7f4:	83 e0       	ldi	r24, 0x03	; 3
     7f6:	0e 94 93 01 	call	0x326	; 0x326 <DIO_WRITEPIN>
			DIO_WRITEPIN(pina2,LOW);
     7fa:	60 e0       	ldi	r22, 0x00	; 0
     7fc:	82 e0       	ldi	r24, 0x02	; 2
     7fe:	0e 94 93 01 	call	0x326	; 0x326 <DIO_WRITEPIN>
			DIO_WRITEPIN(pina1,LOW);
     802:	60 e0       	ldi	r22, 0x00	; 0
     804:	81 e0       	ldi	r24, 0x01	; 1
     806:	0e 94 93 01 	call	0x326	; 0x326 <DIO_WRITEPIN>
			DIO_WRITEPIN(pina0,LOW);
     80a:	60 e0       	ldi	r22, 0x00	; 0
     80c:	80 e0       	ldi	r24, 0x00	; 0
     80e:	0e 94 93 01 	call	0x326	; 0x326 <DIO_WRITEPIN>
			timer0_SetCounter(6);
     812:	86 e0       	ldi	r24, 0x06	; 6
     814:	90 e0       	ldi	r25, 0x00	; 0
     816:	0e 94 96 09 	call	0x132c	; 0x132c <timer0_SetCounter>
     81a:	0e c0       	rjmp	.+28     	; 0x838 <__vector_11+0x220>
		}
		else if(counter==60)
     81c:	8c 33       	cpi	r24, 0x3C	; 60
     81e:	a1 f5       	brne	.+104    	; 0x888 <__stack+0x29>
		{
			DIO_TogglePin(pina3);
     820:	83 e0       	ldi	r24, 0x03	; 3
     822:	0e 94 31 02 	call	0x462	; 0x462 <DIO_TogglePin>
			DIO_TogglePin(pina2);
     826:	82 e0       	ldi	r24, 0x02	; 2
     828:	0e 94 31 02 	call	0x462	; 0x462 <DIO_TogglePin>
			counter=0;
     82c:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
			timer0_SetCounter(6);
     830:	86 e0       	ldi	r24, 0x06	; 6
     832:	90 e0       	ldi	r25, 0x00	; 0
     834:	0e 94 96 09 	call	0x132c	; 0x132c <timer0_SetCounter>
		}
	}
	if(FLAG==7)
     838:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <FLAG>
     83c:	87 30       	cpi	r24, 0x07	; 7
     83e:	21 f5       	brne	.+72     	; 0x888 <__stack+0x29>
	{
		if( counter==5)
     840:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
     844:	85 30       	cpi	r24, 0x05	; 5
     846:	a9 f4       	brne	.+42     	; 0x872 <__stack+0x13>
		{
			DIO_WRITEPIN(pina3,LOW);
     848:	60 e0       	ldi	r22, 0x00	; 0
     84a:	83 e0       	ldi	r24, 0x03	; 3
     84c:	0e 94 93 01 	call	0x326	; 0x326 <DIO_WRITEPIN>
			DIO_WRITEPIN(pina2,LOW);
     850:	60 e0       	ldi	r22, 0x00	; 0
     852:	82 e0       	ldi	r24, 0x02	; 2
     854:	0e 94 93 01 	call	0x326	; 0x326 <DIO_WRITEPIN>
			DIO_WRITEPIN(pina1,LOW);
     858:	60 e0       	ldi	r22, 0x00	; 0
     85a:	81 e0       	ldi	r24, 0x01	; 1
     85c:	0e 94 93 01 	call	0x326	; 0x326 <DIO_WRITEPIN>
			DIO_WRITEPIN(pina0,LOW);
     860:	60 e0       	ldi	r22, 0x00	; 0
     862:	80 e0       	ldi	r24, 0x00	; 0
     864:	0e 94 93 01 	call	0x326	; 0x326 <DIO_WRITEPIN>
			timer0_SetCounter(6);
     868:	86 e0       	ldi	r24, 0x06	; 6
     86a:	90 e0       	ldi	r25, 0x00	; 0
     86c:	0e 94 96 09 	call	0x132c	; 0x132c <timer0_SetCounter>
     870:	0b c0       	rjmp	.+22     	; 0x888 <__stack+0x29>
		}
		else if(counter==60)
     872:	8c 33       	cpi	r24, 0x3C	; 60
     874:	49 f4       	brne	.+18     	; 0x888 <__stack+0x29>
		{
			DIO_TogglePin(pina3);
     876:	83 e0       	ldi	r24, 0x03	; 3
     878:	0e 94 31 02 	call	0x462	; 0x462 <DIO_TogglePin>
			counter=0;
     87c:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
			timer0_SetCounter(6);
     880:	86 e0       	ldi	r24, 0x06	; 6
     882:	90 e0       	ldi	r25, 0x00	; 0
     884:	0e 94 96 09 	call	0x132c	; 0x132c <timer0_SetCounter>
		}
	}
	}
/******************************************************************/

	if(blink_mode==1)
     888:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <blink_mode>
     88c:	81 30       	cpi	r24, 0x01	; 1
     88e:	09 f0       	breq	.+2      	; 0x892 <__stack+0x33>
     890:	23 c1       	rjmp	.+582    	; 0xad8 <__stack+0x279>
	{
		counter++;
     892:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
     896:	8f 5f       	subi	r24, 0xFF	; 255
     898:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
		if(FLAG==1)
     89c:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <FLAG>
     8a0:	91 30       	cpi	r25, 0x01	; 1
     8a2:	b9 f4       	brne	.+46     	; 0x8d2 <__stack+0x73>
		{
			if( counter==12)
     8a4:	8c 30       	cpi	r24, 0x0C	; 12
     8a6:	49 f4       	brne	.+18     	; 0x8ba <__stack+0x5b>
			{
				DIO_WRITEPIN(pina0,LOW);
     8a8:	60 e0       	ldi	r22, 0x00	; 0
     8aa:	80 e0       	ldi	r24, 0x00	; 0
     8ac:	0e 94 93 01 	call	0x326	; 0x326 <DIO_WRITEPIN>
				timer0_SetCounter(6);
     8b0:	86 e0       	ldi	r24, 0x06	; 6
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	0e 94 96 09 	call	0x132c	; 0x132c <timer0_SetCounter>
     8b8:	0c c0       	rjmp	.+24     	; 0x8d2 <__stack+0x73>
			}
			else if(counter==60)
     8ba:	8c 33       	cpi	r24, 0x3C	; 60
     8bc:	09 f0       	breq	.+2      	; 0x8c0 <__stack+0x61>
     8be:	58 c0       	rjmp	.+176    	; 0x970 <__stack+0x111>
			{
				DIO_TogglePin(pina0);
     8c0:	80 e0       	ldi	r24, 0x00	; 0
     8c2:	0e 94 31 02 	call	0x462	; 0x462 <DIO_TogglePin>
				counter=0;
     8c6:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
				timer0_SetCounter(6);
     8ca:	86 e0       	ldi	r24, 0x06	; 6
     8cc:	90 e0       	ldi	r25, 0x00	; 0
     8ce:	0e 94 96 09 	call	0x132c	; 0x132c <timer0_SetCounter>
			}
		}
		if(FLAG==2)
     8d2:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <FLAG>
     8d6:	82 30       	cpi	r24, 0x02	; 2
     8d8:	01 f5       	brne	.+64     	; 0x91a <__stack+0xbb>
		{
			if( counter==12)
     8da:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
     8de:	8c 30       	cpi	r24, 0x0C	; 12
     8e0:	69 f4       	brne	.+26     	; 0x8fc <__stack+0x9d>
			{
				DIO_WRITEPIN(pina1,LOW);
     8e2:	60 e0       	ldi	r22, 0x00	; 0
     8e4:	81 e0       	ldi	r24, 0x01	; 1
     8e6:	0e 94 93 01 	call	0x326	; 0x326 <DIO_WRITEPIN>
				DIO_WRITEPIN(pina0,LOW);
     8ea:	60 e0       	ldi	r22, 0x00	; 0
     8ec:	80 e0       	ldi	r24, 0x00	; 0
     8ee:	0e 94 93 01 	call	0x326	; 0x326 <DIO_WRITEPIN>
				timer0_SetCounter(6);
     8f2:	86 e0       	ldi	r24, 0x06	; 6
     8f4:	90 e0       	ldi	r25, 0x00	; 0
     8f6:	0e 94 96 09 	call	0x132c	; 0x132c <timer0_SetCounter>
     8fa:	0f c0       	rjmp	.+30     	; 0x91a <__stack+0xbb>
			}
			else if(counter==60)
     8fc:	8c 33       	cpi	r24, 0x3C	; 60
     8fe:	09 f0       	breq	.+2      	; 0x902 <__stack+0xa3>
     900:	69 c0       	rjmp	.+210    	; 0x9d4 <__stack+0x175>
			{
				DIO_TogglePin(pina1);
     902:	81 e0       	ldi	r24, 0x01	; 1
     904:	0e 94 31 02 	call	0x462	; 0x462 <DIO_TogglePin>
				DIO_TogglePin(pina0);
     908:	80 e0       	ldi	r24, 0x00	; 0
     90a:	0e 94 31 02 	call	0x462	; 0x462 <DIO_TogglePin>
				counter=0;
     90e:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
				timer0_SetCounter(6);
     912:	86 e0       	ldi	r24, 0x06	; 6
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	0e 94 96 09 	call	0x132c	; 0x132c <timer0_SetCounter>
			}
		}
		if(FLAG==3)
     91a:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <FLAG>
     91e:	83 30       	cpi	r24, 0x03	; 3
     920:	39 f5       	brne	.+78     	; 0x970 <__stack+0x111>
		{
			if( counter==12)
     922:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
     926:	8c 30       	cpi	r24, 0x0C	; 12
     928:	89 f4       	brne	.+34     	; 0x94c <__stack+0xed>
			{
				DIO_WRITEPIN(pina2,LOW);
     92a:	60 e0       	ldi	r22, 0x00	; 0
     92c:	82 e0       	ldi	r24, 0x02	; 2
     92e:	0e 94 93 01 	call	0x326	; 0x326 <DIO_WRITEPIN>
				DIO_WRITEPIN(pina1,LOW);
     932:	60 e0       	ldi	r22, 0x00	; 0
     934:	81 e0       	ldi	r24, 0x01	; 1
     936:	0e 94 93 01 	call	0x326	; 0x326 <DIO_WRITEPIN>
				DIO_WRITEPIN(pina0,LOW);
     93a:	60 e0       	ldi	r22, 0x00	; 0
     93c:	80 e0       	ldi	r24, 0x00	; 0
     93e:	0e 94 93 01 	call	0x326	; 0x326 <DIO_WRITEPIN>
				timer0_SetCounter(6);
     942:	86 e0       	ldi	r24, 0x06	; 6
     944:	90 e0       	ldi	r25, 0x00	; 0
     946:	0e 94 96 09 	call	0x132c	; 0x132c <timer0_SetCounter>
     94a:	12 c0       	rjmp	.+36     	; 0x970 <__stack+0x111>
			}
			else if(counter==60)
     94c:	8c 33       	cpi	r24, 0x3C	; 60
     94e:	09 f0       	breq	.+2      	; 0x952 <__stack+0xf3>
     950:	70 c0       	rjmp	.+224    	; 0xa32 <__stack+0x1d3>
			{
				DIO_TogglePin(pina2);
     952:	82 e0       	ldi	r24, 0x02	; 2
     954:	0e 94 31 02 	call	0x462	; 0x462 <DIO_TogglePin>
				DIO_TogglePin(pina1);
     958:	81 e0       	ldi	r24, 0x01	; 1
     95a:	0e 94 31 02 	call	0x462	; 0x462 <DIO_TogglePin>
				DIO_TogglePin(pina0);
     95e:	80 e0       	ldi	r24, 0x00	; 0
     960:	0e 94 31 02 	call	0x462	; 0x462 <DIO_TogglePin>
				counter=0;
     964:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
				timer0_SetCounter(6);
     968:	86 e0       	ldi	r24, 0x06	; 6
     96a:	90 e0       	ldi	r25, 0x00	; 0
     96c:	0e 94 96 09 	call	0x132c	; 0x132c <timer0_SetCounter>
			}
		}
		if(FLAG==4)
     970:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <FLAG>
     974:	84 30       	cpi	r24, 0x04	; 4
     976:	71 f5       	brne	.+92     	; 0x9d4 <__stack+0x175>
		{
			if( counter==12)
     978:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
     97c:	8c 30       	cpi	r24, 0x0C	; 12
     97e:	a9 f4       	brne	.+42     	; 0x9aa <__stack+0x14b>
			{
				DIO_WRITEPIN(pina3,LOW);
     980:	60 e0       	ldi	r22, 0x00	; 0
     982:	83 e0       	ldi	r24, 0x03	; 3
     984:	0e 94 93 01 	call	0x326	; 0x326 <DIO_WRITEPIN>
				DIO_WRITEPIN(pina2,LOW);
     988:	60 e0       	ldi	r22, 0x00	; 0
     98a:	82 e0       	ldi	r24, 0x02	; 2
     98c:	0e 94 93 01 	call	0x326	; 0x326 <DIO_WRITEPIN>
				DIO_WRITEPIN(pina1,LOW);
     990:	60 e0       	ldi	r22, 0x00	; 0
     992:	81 e0       	ldi	r24, 0x01	; 1
     994:	0e 94 93 01 	call	0x326	; 0x326 <DIO_WRITEPIN>
				DIO_WRITEPIN(pina0,LOW);
     998:	60 e0       	ldi	r22, 0x00	; 0
     99a:	80 e0       	ldi	r24, 0x00	; 0
     99c:	0e 94 93 01 	call	0x326	; 0x326 <DIO_WRITEPIN>
				timer0_SetCounter(6);
     9a0:	86 e0       	ldi	r24, 0x06	; 6
     9a2:	90 e0       	ldi	r25, 0x00	; 0
     9a4:	0e 94 96 09 	call	0x132c	; 0x132c <timer0_SetCounter>
     9a8:	15 c0       	rjmp	.+42     	; 0x9d4 <__stack+0x175>
			}
			else if(counter==60)
     9aa:	8c 33       	cpi	r24, 0x3C	; 60
     9ac:	09 f0       	breq	.+2      	; 0x9b0 <__stack+0x151>
     9ae:	6c c0       	rjmp	.+216    	; 0xa88 <__stack+0x229>
			{
				DIO_TogglePin(pina3);
     9b0:	83 e0       	ldi	r24, 0x03	; 3
     9b2:	0e 94 31 02 	call	0x462	; 0x462 <DIO_TogglePin>
				DIO_TogglePin(pina2);
     9b6:	82 e0       	ldi	r24, 0x02	; 2
     9b8:	0e 94 31 02 	call	0x462	; 0x462 <DIO_TogglePin>
				DIO_TogglePin(pina1);
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	0e 94 31 02 	call	0x462	; 0x462 <DIO_TogglePin>
				DIO_TogglePin(pina0);
     9c2:	80 e0       	ldi	r24, 0x00	; 0
     9c4:	0e 94 31 02 	call	0x462	; 0x462 <DIO_TogglePin>
				counter=0;
     9c8:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
				timer0_SetCounter(6);
     9cc:	86 e0       	ldi	r24, 0x06	; 6
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	0e 94 96 09 	call	0x132c	; 0x132c <timer0_SetCounter>
			}
		}
		if(FLAG==5)
     9d4:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <FLAG>
     9d8:	85 30       	cpi	r24, 0x05	; 5
     9da:	59 f5       	brne	.+86     	; 0xa32 <__stack+0x1d3>
		{
			if( counter==12)
     9dc:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
     9e0:	8c 30       	cpi	r24, 0x0C	; 12
     9e2:	a9 f4       	brne	.+42     	; 0xa0e <__stack+0x1af>
			{
				DIO_WRITEPIN(pina3,LOW);
     9e4:	60 e0       	ldi	r22, 0x00	; 0
     9e6:	83 e0       	ldi	r24, 0x03	; 3
     9e8:	0e 94 93 01 	call	0x326	; 0x326 <DIO_WRITEPIN>
				DIO_WRITEPIN(pina2,LOW);
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	82 e0       	ldi	r24, 0x02	; 2
     9f0:	0e 94 93 01 	call	0x326	; 0x326 <DIO_WRITEPIN>
				DIO_WRITEPIN(pina1,LOW);
     9f4:	60 e0       	ldi	r22, 0x00	; 0
     9f6:	81 e0       	ldi	r24, 0x01	; 1
     9f8:	0e 94 93 01 	call	0x326	; 0x326 <DIO_WRITEPIN>
				DIO_WRITEPIN(pina0,LOW);
     9fc:	60 e0       	ldi	r22, 0x00	; 0
     9fe:	80 e0       	ldi	r24, 0x00	; 0
     a00:	0e 94 93 01 	call	0x326	; 0x326 <DIO_WRITEPIN>
				timer0_SetCounter(6);
     a04:	86 e0       	ldi	r24, 0x06	; 6
     a06:	90 e0       	ldi	r25, 0x00	; 0
     a08:	0e 94 96 09 	call	0x132c	; 0x132c <timer0_SetCounter>
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__stack+0x1d3>
			}
			else if(counter==60)
     a0e:	8c 33       	cpi	r24, 0x3C	; 60
     a10:	09 f0       	breq	.+2      	; 0xa14 <__stack+0x1b5>
     a12:	62 c0       	rjmp	.+196    	; 0xad8 <__stack+0x279>
			{
				DIO_TogglePin(pina3);
     a14:	83 e0       	ldi	r24, 0x03	; 3
     a16:	0e 94 31 02 	call	0x462	; 0x462 <DIO_TogglePin>
				DIO_TogglePin(pina2);
     a1a:	82 e0       	ldi	r24, 0x02	; 2
     a1c:	0e 94 31 02 	call	0x462	; 0x462 <DIO_TogglePin>
				DIO_TogglePin(pina1);
     a20:	81 e0       	ldi	r24, 0x01	; 1
     a22:	0e 94 31 02 	call	0x462	; 0x462 <DIO_TogglePin>
				counter=0;
     a26:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
				timer0_SetCounter(6);
     a2a:	86 e0       	ldi	r24, 0x06	; 6
     a2c:	90 e0       	ldi	r25, 0x00	; 0
     a2e:	0e 94 96 09 	call	0x132c	; 0x132c <timer0_SetCounter>
			}
		}
		if(FLAG==6)
     a32:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <FLAG>
     a36:	86 30       	cpi	r24, 0x06	; 6
     a38:	39 f5       	brne	.+78     	; 0xa88 <__stack+0x229>
		{
			if( counter==12)
     a3a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
     a3e:	8c 30       	cpi	r24, 0x0C	; 12
     a40:	a9 f4       	brne	.+42     	; 0xa6c <__stack+0x20d>
			{
				DIO_WRITEPIN(pina3,LOW);
     a42:	60 e0       	ldi	r22, 0x00	; 0
     a44:	83 e0       	ldi	r24, 0x03	; 3
     a46:	0e 94 93 01 	call	0x326	; 0x326 <DIO_WRITEPIN>
				DIO_WRITEPIN(pina2,LOW);
     a4a:	60 e0       	ldi	r22, 0x00	; 0
     a4c:	82 e0       	ldi	r24, 0x02	; 2
     a4e:	0e 94 93 01 	call	0x326	; 0x326 <DIO_WRITEPIN>
				DIO_WRITEPIN(pina1,LOW);
     a52:	60 e0       	ldi	r22, 0x00	; 0
     a54:	81 e0       	ldi	r24, 0x01	; 1
     a56:	0e 94 93 01 	call	0x326	; 0x326 <DIO_WRITEPIN>
				DIO_WRITEPIN(pina0,LOW);
     a5a:	60 e0       	ldi	r22, 0x00	; 0
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	0e 94 93 01 	call	0x326	; 0x326 <DIO_WRITEPIN>
				timer0_SetCounter(6);
     a62:	86 e0       	ldi	r24, 0x06	; 6
     a64:	90 e0       	ldi	r25, 0x00	; 0
     a66:	0e 94 96 09 	call	0x132c	; 0x132c <timer0_SetCounter>
     a6a:	0e c0       	rjmp	.+28     	; 0xa88 <__stack+0x229>
			}
			else if(counter==60)
     a6c:	8c 33       	cpi	r24, 0x3C	; 60
     a6e:	a1 f5       	brne	.+104    	; 0xad8 <__stack+0x279>
			{
				DIO_TogglePin(pina3);
     a70:	83 e0       	ldi	r24, 0x03	; 3
     a72:	0e 94 31 02 	call	0x462	; 0x462 <DIO_TogglePin>
				DIO_TogglePin(pina2);
     a76:	82 e0       	ldi	r24, 0x02	; 2
     a78:	0e 94 31 02 	call	0x462	; 0x462 <DIO_TogglePin>
				counter=0;
     a7c:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
				timer0_SetCounter(6);
     a80:	86 e0       	ldi	r24, 0x06	; 6
     a82:	90 e0       	ldi	r25, 0x00	; 0
     a84:	0e 94 96 09 	call	0x132c	; 0x132c <timer0_SetCounter>
			}
		}
		if(FLAG==7)
     a88:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <FLAG>
     a8c:	87 30       	cpi	r24, 0x07	; 7
     a8e:	21 f5       	brne	.+72     	; 0xad8 <__stack+0x279>
		{
			if( counter==12)
     a90:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
     a94:	8c 30       	cpi	r24, 0x0C	; 12
     a96:	a9 f4       	brne	.+42     	; 0xac2 <__stack+0x263>
			{
				DIO_WRITEPIN(pina3,LOW);
     a98:	60 e0       	ldi	r22, 0x00	; 0
     a9a:	83 e0       	ldi	r24, 0x03	; 3
     a9c:	0e 94 93 01 	call	0x326	; 0x326 <DIO_WRITEPIN>
				DIO_WRITEPIN(pina2,LOW);
     aa0:	60 e0       	ldi	r22, 0x00	; 0
     aa2:	82 e0       	ldi	r24, 0x02	; 2
     aa4:	0e 94 93 01 	call	0x326	; 0x326 <DIO_WRITEPIN>
				DIO_WRITEPIN(pina1,LOW);
     aa8:	60 e0       	ldi	r22, 0x00	; 0
     aaa:	81 e0       	ldi	r24, 0x01	; 1
     aac:	0e 94 93 01 	call	0x326	; 0x326 <DIO_WRITEPIN>
				DIO_WRITEPIN(pina0,LOW);
     ab0:	60 e0       	ldi	r22, 0x00	; 0
     ab2:	80 e0       	ldi	r24, 0x00	; 0
     ab4:	0e 94 93 01 	call	0x326	; 0x326 <DIO_WRITEPIN>
			    timer0_SetCounter(6);
     ab8:	86 e0       	ldi	r24, 0x06	; 6
     aba:	90 e0       	ldi	r25, 0x00	; 0
     abc:	0e 94 96 09 	call	0x132c	; 0x132c <timer0_SetCounter>
     ac0:	0b c0       	rjmp	.+22     	; 0xad8 <__stack+0x279>
			}
			else if(counter==60)
     ac2:	8c 33       	cpi	r24, 0x3C	; 60
     ac4:	49 f4       	brne	.+18     	; 0xad8 <__stack+0x279>
			{
				DIO_TogglePin(pina3);
     ac6:	83 e0       	ldi	r24, 0x03	; 3
     ac8:	0e 94 31 02 	call	0x462	; 0x462 <DIO_TogglePin>
				counter=0;
     acc:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
				timer0_SetCounter(6);
     ad0:	86 e0       	ldi	r24, 0x06	; 6
     ad2:	90 e0       	ldi	r25, 0x00	; 0
     ad4:	0e 94 96 09 	call	0x132c	; 0x132c <timer0_SetCounter>
			}
		}
	}
/****************************************************************************************/
if(blink_mode==2)
     ad8:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <blink_mode>
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	09 f0       	breq	.+2      	; 0xae2 <__stack+0x283>
     ae0:	23 c1       	rjmp	.+582    	; 0xd28 <__stack+0x4c9>
{
	counter++;
     ae2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
     ae6:	8f 5f       	subi	r24, 0xFF	; 255
     ae8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
	if(FLAG==1)
     aec:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <FLAG>
     af0:	91 30       	cpi	r25, 0x01	; 1
     af2:	b9 f4       	brne	.+46     	; 0xb22 <__stack+0x2c3>
	{
		if( counter==17)
     af4:	81 31       	cpi	r24, 0x11	; 17
     af6:	49 f4       	brne	.+18     	; 0xb0a <__stack+0x2ab>
		{
			DIO_WRITEPIN(pina0,LOW);
     af8:	60 e0       	ldi	r22, 0x00	; 0
     afa:	80 e0       	ldi	r24, 0x00	; 0
     afc:	0e 94 93 01 	call	0x326	; 0x326 <DIO_WRITEPIN>
			timer0_SetCounter(6);
     b00:	86 e0       	ldi	r24, 0x06	; 6
     b02:	90 e0       	ldi	r25, 0x00	; 0
     b04:	0e 94 96 09 	call	0x132c	; 0x132c <timer0_SetCounter>
     b08:	0c c0       	rjmp	.+24     	; 0xb22 <__stack+0x2c3>
		}
		else if(counter==60)
     b0a:	8c 33       	cpi	r24, 0x3C	; 60
     b0c:	09 f0       	breq	.+2      	; 0xb10 <__stack+0x2b1>
     b0e:	58 c0       	rjmp	.+176    	; 0xbc0 <__stack+0x361>
		{
			DIO_TogglePin(pina0);
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	0e 94 31 02 	call	0x462	; 0x462 <DIO_TogglePin>
			counter=0;
     b16:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
			timer0_SetCounter(6);
     b1a:	86 e0       	ldi	r24, 0x06	; 6
     b1c:	90 e0       	ldi	r25, 0x00	; 0
     b1e:	0e 94 96 09 	call	0x132c	; 0x132c <timer0_SetCounter>
		}
	}
	if(FLAG==2)
     b22:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <FLAG>
     b26:	82 30       	cpi	r24, 0x02	; 2
     b28:	01 f5       	brne	.+64     	; 0xb6a <__stack+0x30b>
	{
		if( counter==17)
     b2a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
     b2e:	81 31       	cpi	r24, 0x11	; 17
     b30:	69 f4       	brne	.+26     	; 0xb4c <__stack+0x2ed>
		{
			DIO_WRITEPIN(pina1,LOW);
     b32:	60 e0       	ldi	r22, 0x00	; 0
     b34:	81 e0       	ldi	r24, 0x01	; 1
     b36:	0e 94 93 01 	call	0x326	; 0x326 <DIO_WRITEPIN>
			DIO_WRITEPIN(pina0,LOW);
     b3a:	60 e0       	ldi	r22, 0x00	; 0
     b3c:	80 e0       	ldi	r24, 0x00	; 0
     b3e:	0e 94 93 01 	call	0x326	; 0x326 <DIO_WRITEPIN>
			timer0_SetCounter(6);
     b42:	86 e0       	ldi	r24, 0x06	; 6
     b44:	90 e0       	ldi	r25, 0x00	; 0
     b46:	0e 94 96 09 	call	0x132c	; 0x132c <timer0_SetCounter>
     b4a:	0f c0       	rjmp	.+30     	; 0xb6a <__stack+0x30b>
		}
		else if(counter==60)
     b4c:	8c 33       	cpi	r24, 0x3C	; 60
     b4e:	09 f0       	breq	.+2      	; 0xb52 <__stack+0x2f3>
     b50:	69 c0       	rjmp	.+210    	; 0xc24 <__stack+0x3c5>
		{
			DIO_TogglePin(pina1);
     b52:	81 e0       	ldi	r24, 0x01	; 1
     b54:	0e 94 31 02 	call	0x462	; 0x462 <DIO_TogglePin>
			DIO_TogglePin(pina0);
     b58:	80 e0       	ldi	r24, 0x00	; 0
     b5a:	0e 94 31 02 	call	0x462	; 0x462 <DIO_TogglePin>
			counter=0;
     b5e:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
			timer0_SetCounter(6);
     b62:	86 e0       	ldi	r24, 0x06	; 6
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	0e 94 96 09 	call	0x132c	; 0x132c <timer0_SetCounter>
		}
	}
	if(FLAG==3)
     b6a:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <FLAG>
     b6e:	83 30       	cpi	r24, 0x03	; 3
     b70:	39 f5       	brne	.+78     	; 0xbc0 <__stack+0x361>
	{
		if( counter==17)
     b72:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
     b76:	81 31       	cpi	r24, 0x11	; 17
     b78:	89 f4       	brne	.+34     	; 0xb9c <__stack+0x33d>
		{
			DIO_WRITEPIN(pina2,LOW);
     b7a:	60 e0       	ldi	r22, 0x00	; 0
     b7c:	82 e0       	ldi	r24, 0x02	; 2
     b7e:	0e 94 93 01 	call	0x326	; 0x326 <DIO_WRITEPIN>
			DIO_WRITEPIN(pina1,LOW);
     b82:	60 e0       	ldi	r22, 0x00	; 0
     b84:	81 e0       	ldi	r24, 0x01	; 1
     b86:	0e 94 93 01 	call	0x326	; 0x326 <DIO_WRITEPIN>
			DIO_WRITEPIN(pina0,LOW);
     b8a:	60 e0       	ldi	r22, 0x00	; 0
     b8c:	80 e0       	ldi	r24, 0x00	; 0
     b8e:	0e 94 93 01 	call	0x326	; 0x326 <DIO_WRITEPIN>
			timer0_SetCounter(6);
     b92:	86 e0       	ldi	r24, 0x06	; 6
     b94:	90 e0       	ldi	r25, 0x00	; 0
     b96:	0e 94 96 09 	call	0x132c	; 0x132c <timer0_SetCounter>
     b9a:	12 c0       	rjmp	.+36     	; 0xbc0 <__stack+0x361>
		}
		else if(counter==60)
     b9c:	8c 33       	cpi	r24, 0x3C	; 60
     b9e:	09 f0       	breq	.+2      	; 0xba2 <__stack+0x343>
     ba0:	70 c0       	rjmp	.+224    	; 0xc82 <__stack+0x423>
		{
			DIO_TogglePin(pina2);
     ba2:	82 e0       	ldi	r24, 0x02	; 2
     ba4:	0e 94 31 02 	call	0x462	; 0x462 <DIO_TogglePin>
			DIO_TogglePin(pina1);
     ba8:	81 e0       	ldi	r24, 0x01	; 1
     baa:	0e 94 31 02 	call	0x462	; 0x462 <DIO_TogglePin>
			DIO_TogglePin(pina0);
     bae:	80 e0       	ldi	r24, 0x00	; 0
     bb0:	0e 94 31 02 	call	0x462	; 0x462 <DIO_TogglePin>
			counter=0;
     bb4:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
			timer0_SetCounter(6);
     bb8:	86 e0       	ldi	r24, 0x06	; 6
     bba:	90 e0       	ldi	r25, 0x00	; 0
     bbc:	0e 94 96 09 	call	0x132c	; 0x132c <timer0_SetCounter>
		}
	}
	if(FLAG==4)
     bc0:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <FLAG>
     bc4:	84 30       	cpi	r24, 0x04	; 4
     bc6:	71 f5       	brne	.+92     	; 0xc24 <__stack+0x3c5>
	{
		if( counter==17)
     bc8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
     bcc:	81 31       	cpi	r24, 0x11	; 17
     bce:	a9 f4       	brne	.+42     	; 0xbfa <__stack+0x39b>
		{
			DIO_WRITEPIN(pina3,LOW);
     bd0:	60 e0       	ldi	r22, 0x00	; 0
     bd2:	83 e0       	ldi	r24, 0x03	; 3
     bd4:	0e 94 93 01 	call	0x326	; 0x326 <DIO_WRITEPIN>
			DIO_WRITEPIN(pina2,LOW);
     bd8:	60 e0       	ldi	r22, 0x00	; 0
     bda:	82 e0       	ldi	r24, 0x02	; 2
     bdc:	0e 94 93 01 	call	0x326	; 0x326 <DIO_WRITEPIN>
			DIO_WRITEPIN(pina1,LOW);
     be0:	60 e0       	ldi	r22, 0x00	; 0
     be2:	81 e0       	ldi	r24, 0x01	; 1
     be4:	0e 94 93 01 	call	0x326	; 0x326 <DIO_WRITEPIN>
			DIO_WRITEPIN(pina0,LOW);
     be8:	60 e0       	ldi	r22, 0x00	; 0
     bea:	80 e0       	ldi	r24, 0x00	; 0
     bec:	0e 94 93 01 	call	0x326	; 0x326 <DIO_WRITEPIN>
			timer0_SetCounter(6);
     bf0:	86 e0       	ldi	r24, 0x06	; 6
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	0e 94 96 09 	call	0x132c	; 0x132c <timer0_SetCounter>
     bf8:	15 c0       	rjmp	.+42     	; 0xc24 <__stack+0x3c5>
		}
		else if(counter==60)
     bfa:	8c 33       	cpi	r24, 0x3C	; 60
     bfc:	09 f0       	breq	.+2      	; 0xc00 <__stack+0x3a1>
     bfe:	6c c0       	rjmp	.+216    	; 0xcd8 <__stack+0x479>
		{
			DIO_TogglePin(pina3);
     c00:	83 e0       	ldi	r24, 0x03	; 3
     c02:	0e 94 31 02 	call	0x462	; 0x462 <DIO_TogglePin>
			DIO_TogglePin(pina2);
     c06:	82 e0       	ldi	r24, 0x02	; 2
     c08:	0e 94 31 02 	call	0x462	; 0x462 <DIO_TogglePin>
			DIO_TogglePin(pina1);
     c0c:	81 e0       	ldi	r24, 0x01	; 1
     c0e:	0e 94 31 02 	call	0x462	; 0x462 <DIO_TogglePin>
			DIO_TogglePin(pina0);
     c12:	80 e0       	ldi	r24, 0x00	; 0
     c14:	0e 94 31 02 	call	0x462	; 0x462 <DIO_TogglePin>
			counter=0;
     c18:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
			timer0_SetCounter(6);
     c1c:	86 e0       	ldi	r24, 0x06	; 6
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	0e 94 96 09 	call	0x132c	; 0x132c <timer0_SetCounter>
		}
	}
	if(FLAG==5)
     c24:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <FLAG>
     c28:	85 30       	cpi	r24, 0x05	; 5
     c2a:	59 f5       	brne	.+86     	; 0xc82 <__stack+0x423>
	{
		if( counter==17)
     c2c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
     c30:	81 31       	cpi	r24, 0x11	; 17
     c32:	a9 f4       	brne	.+42     	; 0xc5e <__stack+0x3ff>
		{
			DIO_WRITEPIN(pina3,LOW);
     c34:	60 e0       	ldi	r22, 0x00	; 0
     c36:	83 e0       	ldi	r24, 0x03	; 3
     c38:	0e 94 93 01 	call	0x326	; 0x326 <DIO_WRITEPIN>
			DIO_WRITEPIN(pina2,LOW);
     c3c:	60 e0       	ldi	r22, 0x00	; 0
     c3e:	82 e0       	ldi	r24, 0x02	; 2
     c40:	0e 94 93 01 	call	0x326	; 0x326 <DIO_WRITEPIN>
			DIO_WRITEPIN(pina1,LOW);
     c44:	60 e0       	ldi	r22, 0x00	; 0
     c46:	81 e0       	ldi	r24, 0x01	; 1
     c48:	0e 94 93 01 	call	0x326	; 0x326 <DIO_WRITEPIN>
			DIO_WRITEPIN(pina0,LOW);
     c4c:	60 e0       	ldi	r22, 0x00	; 0
     c4e:	80 e0       	ldi	r24, 0x00	; 0
     c50:	0e 94 93 01 	call	0x326	; 0x326 <DIO_WRITEPIN>
			timer0_SetCounter(6);
     c54:	86 e0       	ldi	r24, 0x06	; 6
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	0e 94 96 09 	call	0x132c	; 0x132c <timer0_SetCounter>
     c5c:	12 c0       	rjmp	.+36     	; 0xc82 <__stack+0x423>
		}
		else if(counter==60)
     c5e:	8c 33       	cpi	r24, 0x3C	; 60
     c60:	09 f0       	breq	.+2      	; 0xc64 <__stack+0x405>
     c62:	62 c0       	rjmp	.+196    	; 0xd28 <__stack+0x4c9>
		{
			DIO_TogglePin(pina3);
     c64:	83 e0       	ldi	r24, 0x03	; 3
     c66:	0e 94 31 02 	call	0x462	; 0x462 <DIO_TogglePin>
			DIO_TogglePin(pina2);
     c6a:	82 e0       	ldi	r24, 0x02	; 2
     c6c:	0e 94 31 02 	call	0x462	; 0x462 <DIO_TogglePin>
			DIO_TogglePin(pina1);
     c70:	81 e0       	ldi	r24, 0x01	; 1
     c72:	0e 94 31 02 	call	0x462	; 0x462 <DIO_TogglePin>
			counter=0;
     c76:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
			timer0_SetCounter(6);
     c7a:	86 e0       	ldi	r24, 0x06	; 6
     c7c:	90 e0       	ldi	r25, 0x00	; 0
     c7e:	0e 94 96 09 	call	0x132c	; 0x132c <timer0_SetCounter>
		}
	}
	if(FLAG==6)
     c82:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <FLAG>
     c86:	86 30       	cpi	r24, 0x06	; 6
     c88:	39 f5       	brne	.+78     	; 0xcd8 <__stack+0x479>
	{
		if( counter==17)
     c8a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
     c8e:	81 31       	cpi	r24, 0x11	; 17
     c90:	a9 f4       	brne	.+42     	; 0xcbc <__stack+0x45d>
		{
			DIO_WRITEPIN(pina3,LOW);
     c92:	60 e0       	ldi	r22, 0x00	; 0
     c94:	83 e0       	ldi	r24, 0x03	; 3
     c96:	0e 94 93 01 	call	0x326	; 0x326 <DIO_WRITEPIN>
			DIO_WRITEPIN(pina2,LOW);
     c9a:	60 e0       	ldi	r22, 0x00	; 0
     c9c:	82 e0       	ldi	r24, 0x02	; 2
     c9e:	0e 94 93 01 	call	0x326	; 0x326 <DIO_WRITEPIN>
			DIO_WRITEPIN(pina1,LOW);
     ca2:	60 e0       	ldi	r22, 0x00	; 0
     ca4:	81 e0       	ldi	r24, 0x01	; 1
     ca6:	0e 94 93 01 	call	0x326	; 0x326 <DIO_WRITEPIN>
			DIO_WRITEPIN(pina0,LOW);
     caa:	60 e0       	ldi	r22, 0x00	; 0
     cac:	80 e0       	ldi	r24, 0x00	; 0
     cae:	0e 94 93 01 	call	0x326	; 0x326 <DIO_WRITEPIN>
			timer0_SetCounter(6);
     cb2:	86 e0       	ldi	r24, 0x06	; 6
     cb4:	90 e0       	ldi	r25, 0x00	; 0
     cb6:	0e 94 96 09 	call	0x132c	; 0x132c <timer0_SetCounter>
     cba:	0e c0       	rjmp	.+28     	; 0xcd8 <__stack+0x479>
		}
		else if(counter==60)
     cbc:	8c 33       	cpi	r24, 0x3C	; 60
     cbe:	a1 f5       	brne	.+104    	; 0xd28 <__stack+0x4c9>
		{
			DIO_TogglePin(pina3);
     cc0:	83 e0       	ldi	r24, 0x03	; 3
     cc2:	0e 94 31 02 	call	0x462	; 0x462 <DIO_TogglePin>
			DIO_TogglePin(pina2);
     cc6:	82 e0       	ldi	r24, 0x02	; 2
     cc8:	0e 94 31 02 	call	0x462	; 0x462 <DIO_TogglePin>
			counter=0;
     ccc:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
			timer0_SetCounter(6);
     cd0:	86 e0       	ldi	r24, 0x06	; 6
     cd2:	90 e0       	ldi	r25, 0x00	; 0
     cd4:	0e 94 96 09 	call	0x132c	; 0x132c <timer0_SetCounter>
		}
	}
	if(FLAG==7)
     cd8:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <FLAG>
     cdc:	87 30       	cpi	r24, 0x07	; 7
     cde:	21 f5       	brne	.+72     	; 0xd28 <__stack+0x4c9>
	{
		if( counter==17)
     ce0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
     ce4:	81 31       	cpi	r24, 0x11	; 17
     ce6:	a9 f4       	brne	.+42     	; 0xd12 <__stack+0x4b3>
		{
			DIO_WRITEPIN(pina3,LOW);
     ce8:	60 e0       	ldi	r22, 0x00	; 0
     cea:	83 e0       	ldi	r24, 0x03	; 3
     cec:	0e 94 93 01 	call	0x326	; 0x326 <DIO_WRITEPIN>
			DIO_WRITEPIN(pina2,LOW);
     cf0:	60 e0       	ldi	r22, 0x00	; 0
     cf2:	82 e0       	ldi	r24, 0x02	; 2
     cf4:	0e 94 93 01 	call	0x326	; 0x326 <DIO_WRITEPIN>
			DIO_WRITEPIN(pina1,LOW);
     cf8:	60 e0       	ldi	r22, 0x00	; 0
     cfa:	81 e0       	ldi	r24, 0x01	; 1
     cfc:	0e 94 93 01 	call	0x326	; 0x326 <DIO_WRITEPIN>
			DIO_WRITEPIN(pina0,LOW);
     d00:	60 e0       	ldi	r22, 0x00	; 0
     d02:	80 e0       	ldi	r24, 0x00	; 0
     d04:	0e 94 93 01 	call	0x326	; 0x326 <DIO_WRITEPIN>
			timer0_SetCounter(6);
     d08:	86 e0       	ldi	r24, 0x06	; 6
     d0a:	90 e0       	ldi	r25, 0x00	; 0
     d0c:	0e 94 96 09 	call	0x132c	; 0x132c <timer0_SetCounter>
     d10:	0b c0       	rjmp	.+22     	; 0xd28 <__stack+0x4c9>
		}
		else if(counter==60)
     d12:	8c 33       	cpi	r24, 0x3C	; 60
     d14:	49 f4       	brne	.+18     	; 0xd28 <__stack+0x4c9>
		{
			DIO_TogglePin(pina3);
     d16:	83 e0       	ldi	r24, 0x03	; 3
     d18:	0e 94 31 02 	call	0x462	; 0x462 <DIO_TogglePin>
			counter=0;
     d1c:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
			timer0_SetCounter(6);
     d20:	86 e0       	ldi	r24, 0x06	; 6
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	0e 94 96 09 	call	0x132c	; 0x132c <timer0_SetCounter>
		}
	}
}
/**********************************************************************************/
if(blink_mode==3)
     d28:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <blink_mode>
     d2c:	83 30       	cpi	r24, 0x03	; 3
     d2e:	09 f0       	breq	.+2      	; 0xd32 <__stack+0x4d3>
     d30:	23 c1       	rjmp	.+582    	; 0xf78 <__stack+0x719>
{
	counter++;
     d32:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
     d36:	8f 5f       	subi	r24, 0xFF	; 255
     d38:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
	if(FLAG==1)
     d3c:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <FLAG>
     d40:	91 30       	cpi	r25, 0x01	; 1
     d42:	b9 f4       	brne	.+46     	; 0xd72 <__stack+0x513>
	{
		if( counter==30)
     d44:	8e 31       	cpi	r24, 0x1E	; 30
     d46:	49 f4       	brne	.+18     	; 0xd5a <__stack+0x4fb>
		{
			DIO_WRITEPIN(pina0,LOW);
     d48:	60 e0       	ldi	r22, 0x00	; 0
     d4a:	80 e0       	ldi	r24, 0x00	; 0
     d4c:	0e 94 93 01 	call	0x326	; 0x326 <DIO_WRITEPIN>
			timer0_SetCounter(6);
     d50:	86 e0       	ldi	r24, 0x06	; 6
     d52:	90 e0       	ldi	r25, 0x00	; 0
     d54:	0e 94 96 09 	call	0x132c	; 0x132c <timer0_SetCounter>
     d58:	0c c0       	rjmp	.+24     	; 0xd72 <__stack+0x513>
		}
		else if(counter==60)
     d5a:	8c 33       	cpi	r24, 0x3C	; 60
     d5c:	09 f0       	breq	.+2      	; 0xd60 <__stack+0x501>
     d5e:	58 c0       	rjmp	.+176    	; 0xe10 <__stack+0x5b1>
		{
			DIO_TogglePin(pina0);
     d60:	80 e0       	ldi	r24, 0x00	; 0
     d62:	0e 94 31 02 	call	0x462	; 0x462 <DIO_TogglePin>
			counter=0;
     d66:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
			timer0_SetCounter(6);
     d6a:	86 e0       	ldi	r24, 0x06	; 6
     d6c:	90 e0       	ldi	r25, 0x00	; 0
     d6e:	0e 94 96 09 	call	0x132c	; 0x132c <timer0_SetCounter>
		}
	}
	if(FLAG==2)
     d72:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <FLAG>
     d76:	82 30       	cpi	r24, 0x02	; 2
     d78:	01 f5       	brne	.+64     	; 0xdba <__stack+0x55b>
	{
		if( counter==30)
     d7a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
     d7e:	8e 31       	cpi	r24, 0x1E	; 30
     d80:	69 f4       	brne	.+26     	; 0xd9c <__stack+0x53d>
		{
			DIO_WRITEPIN(pina1,LOW);
     d82:	60 e0       	ldi	r22, 0x00	; 0
     d84:	81 e0       	ldi	r24, 0x01	; 1
     d86:	0e 94 93 01 	call	0x326	; 0x326 <DIO_WRITEPIN>
			DIO_WRITEPIN(pina0,LOW);
     d8a:	60 e0       	ldi	r22, 0x00	; 0
     d8c:	80 e0       	ldi	r24, 0x00	; 0
     d8e:	0e 94 93 01 	call	0x326	; 0x326 <DIO_WRITEPIN>
			timer0_SetCounter(6);
     d92:	86 e0       	ldi	r24, 0x06	; 6
     d94:	90 e0       	ldi	r25, 0x00	; 0
     d96:	0e 94 96 09 	call	0x132c	; 0x132c <timer0_SetCounter>
     d9a:	0f c0       	rjmp	.+30     	; 0xdba <__stack+0x55b>
		}
		else if(counter==60)
     d9c:	8c 33       	cpi	r24, 0x3C	; 60
     d9e:	09 f0       	breq	.+2      	; 0xda2 <__stack+0x543>
     da0:	69 c0       	rjmp	.+210    	; 0xe74 <__stack+0x615>
		{
			DIO_TogglePin(pina1);
     da2:	81 e0       	ldi	r24, 0x01	; 1
     da4:	0e 94 31 02 	call	0x462	; 0x462 <DIO_TogglePin>
			DIO_TogglePin(pina0);
     da8:	80 e0       	ldi	r24, 0x00	; 0
     daa:	0e 94 31 02 	call	0x462	; 0x462 <DIO_TogglePin>
			counter=0;
     dae:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
			timer0_SetCounter(6);
     db2:	86 e0       	ldi	r24, 0x06	; 6
     db4:	90 e0       	ldi	r25, 0x00	; 0
     db6:	0e 94 96 09 	call	0x132c	; 0x132c <timer0_SetCounter>
		}
	}
	if(FLAG==3)
     dba:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <FLAG>
     dbe:	83 30       	cpi	r24, 0x03	; 3
     dc0:	39 f5       	brne	.+78     	; 0xe10 <__stack+0x5b1>
	{
		if( counter==30)
     dc2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
     dc6:	8e 31       	cpi	r24, 0x1E	; 30
     dc8:	89 f4       	brne	.+34     	; 0xdec <__stack+0x58d>
		{
			DIO_WRITEPIN(pina2,LOW);
     dca:	60 e0       	ldi	r22, 0x00	; 0
     dcc:	82 e0       	ldi	r24, 0x02	; 2
     dce:	0e 94 93 01 	call	0x326	; 0x326 <DIO_WRITEPIN>
			DIO_WRITEPIN(pina1,LOW);
     dd2:	60 e0       	ldi	r22, 0x00	; 0
     dd4:	81 e0       	ldi	r24, 0x01	; 1
     dd6:	0e 94 93 01 	call	0x326	; 0x326 <DIO_WRITEPIN>
			DIO_WRITEPIN(pina0,LOW);
     dda:	60 e0       	ldi	r22, 0x00	; 0
     ddc:	80 e0       	ldi	r24, 0x00	; 0
     dde:	0e 94 93 01 	call	0x326	; 0x326 <DIO_WRITEPIN>
			timer0_SetCounter(6);
     de2:	86 e0       	ldi	r24, 0x06	; 6
     de4:	90 e0       	ldi	r25, 0x00	; 0
     de6:	0e 94 96 09 	call	0x132c	; 0x132c <timer0_SetCounter>
     dea:	12 c0       	rjmp	.+36     	; 0xe10 <__stack+0x5b1>
		}
		else if(counter==60)
     dec:	8c 33       	cpi	r24, 0x3C	; 60
     dee:	09 f0       	breq	.+2      	; 0xdf2 <__stack+0x593>
     df0:	70 c0       	rjmp	.+224    	; 0xed2 <__stack+0x673>
		{
			DIO_TogglePin(pina2);
     df2:	82 e0       	ldi	r24, 0x02	; 2
     df4:	0e 94 31 02 	call	0x462	; 0x462 <DIO_TogglePin>
			DIO_TogglePin(pina1);
     df8:	81 e0       	ldi	r24, 0x01	; 1
     dfa:	0e 94 31 02 	call	0x462	; 0x462 <DIO_TogglePin>
			DIO_TogglePin(pina0);
     dfe:	80 e0       	ldi	r24, 0x00	; 0
     e00:	0e 94 31 02 	call	0x462	; 0x462 <DIO_TogglePin>
			counter=0;
     e04:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
			timer0_SetCounter(6);
     e08:	86 e0       	ldi	r24, 0x06	; 6
     e0a:	90 e0       	ldi	r25, 0x00	; 0
     e0c:	0e 94 96 09 	call	0x132c	; 0x132c <timer0_SetCounter>
		}
	}
	if(FLAG==4)
     e10:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <FLAG>
     e14:	84 30       	cpi	r24, 0x04	; 4
     e16:	71 f5       	brne	.+92     	; 0xe74 <__stack+0x615>
	{
		if( counter==30)
     e18:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
     e1c:	8e 31       	cpi	r24, 0x1E	; 30
     e1e:	a9 f4       	brne	.+42     	; 0xe4a <__stack+0x5eb>
		{
			DIO_WRITEPIN(pina3,LOW);
     e20:	60 e0       	ldi	r22, 0x00	; 0
     e22:	83 e0       	ldi	r24, 0x03	; 3
     e24:	0e 94 93 01 	call	0x326	; 0x326 <DIO_WRITEPIN>
			DIO_WRITEPIN(pina2,LOW);
     e28:	60 e0       	ldi	r22, 0x00	; 0
     e2a:	82 e0       	ldi	r24, 0x02	; 2
     e2c:	0e 94 93 01 	call	0x326	; 0x326 <DIO_WRITEPIN>
			DIO_WRITEPIN(pina1,LOW);
     e30:	60 e0       	ldi	r22, 0x00	; 0
     e32:	81 e0       	ldi	r24, 0x01	; 1
     e34:	0e 94 93 01 	call	0x326	; 0x326 <DIO_WRITEPIN>
			DIO_WRITEPIN(pina0,LOW);
     e38:	60 e0       	ldi	r22, 0x00	; 0
     e3a:	80 e0       	ldi	r24, 0x00	; 0
     e3c:	0e 94 93 01 	call	0x326	; 0x326 <DIO_WRITEPIN>
			timer0_SetCounter(6);
     e40:	86 e0       	ldi	r24, 0x06	; 6
     e42:	90 e0       	ldi	r25, 0x00	; 0
     e44:	0e 94 96 09 	call	0x132c	; 0x132c <timer0_SetCounter>
     e48:	15 c0       	rjmp	.+42     	; 0xe74 <__stack+0x615>
		}
		else if(counter==60)
     e4a:	8c 33       	cpi	r24, 0x3C	; 60
     e4c:	09 f0       	breq	.+2      	; 0xe50 <__stack+0x5f1>
     e4e:	6c c0       	rjmp	.+216    	; 0xf28 <__stack+0x6c9>
		{
			DIO_TogglePin(pina3);
     e50:	83 e0       	ldi	r24, 0x03	; 3
     e52:	0e 94 31 02 	call	0x462	; 0x462 <DIO_TogglePin>
			DIO_TogglePin(pina2);
     e56:	82 e0       	ldi	r24, 0x02	; 2
     e58:	0e 94 31 02 	call	0x462	; 0x462 <DIO_TogglePin>
			DIO_TogglePin(pina1);
     e5c:	81 e0       	ldi	r24, 0x01	; 1
     e5e:	0e 94 31 02 	call	0x462	; 0x462 <DIO_TogglePin>
			DIO_TogglePin(pina0);
     e62:	80 e0       	ldi	r24, 0x00	; 0
     e64:	0e 94 31 02 	call	0x462	; 0x462 <DIO_TogglePin>
			counter=0;
     e68:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
			timer0_SetCounter(6);
     e6c:	86 e0       	ldi	r24, 0x06	; 6
     e6e:	90 e0       	ldi	r25, 0x00	; 0
     e70:	0e 94 96 09 	call	0x132c	; 0x132c <timer0_SetCounter>
		}
	}
	if(FLAG==5)
     e74:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <FLAG>
     e78:	85 30       	cpi	r24, 0x05	; 5
     e7a:	59 f5       	brne	.+86     	; 0xed2 <__stack+0x673>
	{
		if( counter==30)
     e7c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
     e80:	8e 31       	cpi	r24, 0x1E	; 30
     e82:	a9 f4       	brne	.+42     	; 0xeae <__stack+0x64f>
		{
			DIO_WRITEPIN(pina3,LOW);
     e84:	60 e0       	ldi	r22, 0x00	; 0
     e86:	83 e0       	ldi	r24, 0x03	; 3
     e88:	0e 94 93 01 	call	0x326	; 0x326 <DIO_WRITEPIN>
			DIO_WRITEPIN(pina2,LOW);
     e8c:	60 e0       	ldi	r22, 0x00	; 0
     e8e:	82 e0       	ldi	r24, 0x02	; 2
     e90:	0e 94 93 01 	call	0x326	; 0x326 <DIO_WRITEPIN>
			DIO_WRITEPIN(pina1,LOW);
     e94:	60 e0       	ldi	r22, 0x00	; 0
     e96:	81 e0       	ldi	r24, 0x01	; 1
     e98:	0e 94 93 01 	call	0x326	; 0x326 <DIO_WRITEPIN>
			DIO_WRITEPIN(pina0,LOW);
     e9c:	60 e0       	ldi	r22, 0x00	; 0
     e9e:	80 e0       	ldi	r24, 0x00	; 0
     ea0:	0e 94 93 01 	call	0x326	; 0x326 <DIO_WRITEPIN>
			timer0_SetCounter(6);
     ea4:	86 e0       	ldi	r24, 0x06	; 6
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	0e 94 96 09 	call	0x132c	; 0x132c <timer0_SetCounter>
     eac:	12 c0       	rjmp	.+36     	; 0xed2 <__stack+0x673>
		}
		else if(counter==60)
     eae:	8c 33       	cpi	r24, 0x3C	; 60
     eb0:	09 f0       	breq	.+2      	; 0xeb4 <__stack+0x655>
     eb2:	62 c0       	rjmp	.+196    	; 0xf78 <__stack+0x719>
		{
			DIO_TogglePin(pina3);
     eb4:	83 e0       	ldi	r24, 0x03	; 3
     eb6:	0e 94 31 02 	call	0x462	; 0x462 <DIO_TogglePin>
			DIO_TogglePin(pina2);
     eba:	82 e0       	ldi	r24, 0x02	; 2
     ebc:	0e 94 31 02 	call	0x462	; 0x462 <DIO_TogglePin>
			DIO_TogglePin(pina1);
     ec0:	81 e0       	ldi	r24, 0x01	; 1
     ec2:	0e 94 31 02 	call	0x462	; 0x462 <DIO_TogglePin>
			counter=0;
     ec6:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
			timer0_SetCounter(6);
     eca:	86 e0       	ldi	r24, 0x06	; 6
     ecc:	90 e0       	ldi	r25, 0x00	; 0
     ece:	0e 94 96 09 	call	0x132c	; 0x132c <timer0_SetCounter>
		}
	}
	if(FLAG==6)
     ed2:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <FLAG>
     ed6:	86 30       	cpi	r24, 0x06	; 6
     ed8:	39 f5       	brne	.+78     	; 0xf28 <__stack+0x6c9>
	{
		if( counter==30)
     eda:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
     ede:	8e 31       	cpi	r24, 0x1E	; 30
     ee0:	a9 f4       	brne	.+42     	; 0xf0c <__stack+0x6ad>
		{
			DIO_WRITEPIN(pina3,LOW);
     ee2:	60 e0       	ldi	r22, 0x00	; 0
     ee4:	83 e0       	ldi	r24, 0x03	; 3
     ee6:	0e 94 93 01 	call	0x326	; 0x326 <DIO_WRITEPIN>
			DIO_WRITEPIN(pina2,LOW);
     eea:	60 e0       	ldi	r22, 0x00	; 0
     eec:	82 e0       	ldi	r24, 0x02	; 2
     eee:	0e 94 93 01 	call	0x326	; 0x326 <DIO_WRITEPIN>
			DIO_WRITEPIN(pina1,LOW);
     ef2:	60 e0       	ldi	r22, 0x00	; 0
     ef4:	81 e0       	ldi	r24, 0x01	; 1
     ef6:	0e 94 93 01 	call	0x326	; 0x326 <DIO_WRITEPIN>
			DIO_WRITEPIN(pina0,LOW);
     efa:	60 e0       	ldi	r22, 0x00	; 0
     efc:	80 e0       	ldi	r24, 0x00	; 0
     efe:	0e 94 93 01 	call	0x326	; 0x326 <DIO_WRITEPIN>
			timer0_SetCounter(6);
     f02:	86 e0       	ldi	r24, 0x06	; 6
     f04:	90 e0       	ldi	r25, 0x00	; 0
     f06:	0e 94 96 09 	call	0x132c	; 0x132c <timer0_SetCounter>
     f0a:	0e c0       	rjmp	.+28     	; 0xf28 <__stack+0x6c9>
		}
		else if(counter==60)
     f0c:	8c 33       	cpi	r24, 0x3C	; 60
     f0e:	a1 f5       	brne	.+104    	; 0xf78 <__stack+0x719>
		{
			DIO_TogglePin(pina3);
     f10:	83 e0       	ldi	r24, 0x03	; 3
     f12:	0e 94 31 02 	call	0x462	; 0x462 <DIO_TogglePin>
			DIO_TogglePin(pina2);
     f16:	82 e0       	ldi	r24, 0x02	; 2
     f18:	0e 94 31 02 	call	0x462	; 0x462 <DIO_TogglePin>
			counter=0;
     f1c:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
			timer0_SetCounter(6);
     f20:	86 e0       	ldi	r24, 0x06	; 6
     f22:	90 e0       	ldi	r25, 0x00	; 0
     f24:	0e 94 96 09 	call	0x132c	; 0x132c <timer0_SetCounter>
		}
	}
	if(FLAG==7)
     f28:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <FLAG>
     f2c:	87 30       	cpi	r24, 0x07	; 7
     f2e:	21 f5       	brne	.+72     	; 0xf78 <__stack+0x719>
	{
		if( counter==30)
     f30:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
     f34:	8e 31       	cpi	r24, 0x1E	; 30
     f36:	a9 f4       	brne	.+42     	; 0xf62 <__stack+0x703>
		{
			DIO_WRITEPIN(pina3,LOW);
     f38:	60 e0       	ldi	r22, 0x00	; 0
     f3a:	83 e0       	ldi	r24, 0x03	; 3
     f3c:	0e 94 93 01 	call	0x326	; 0x326 <DIO_WRITEPIN>
			DIO_WRITEPIN(pina2,LOW);
     f40:	60 e0       	ldi	r22, 0x00	; 0
     f42:	82 e0       	ldi	r24, 0x02	; 2
     f44:	0e 94 93 01 	call	0x326	; 0x326 <DIO_WRITEPIN>
			DIO_WRITEPIN(pina1,LOW);
     f48:	60 e0       	ldi	r22, 0x00	; 0
     f4a:	81 e0       	ldi	r24, 0x01	; 1
     f4c:	0e 94 93 01 	call	0x326	; 0x326 <DIO_WRITEPIN>
			DIO_WRITEPIN(pina0,LOW);
     f50:	60 e0       	ldi	r22, 0x00	; 0
     f52:	80 e0       	ldi	r24, 0x00	; 0
     f54:	0e 94 93 01 	call	0x326	; 0x326 <DIO_WRITEPIN>
			timer0_SetCounter(6);
     f58:	86 e0       	ldi	r24, 0x06	; 6
     f5a:	90 e0       	ldi	r25, 0x00	; 0
     f5c:	0e 94 96 09 	call	0x132c	; 0x132c <timer0_SetCounter>
     f60:	0b c0       	rjmp	.+22     	; 0xf78 <__stack+0x719>
		}
		else if(counter==60)
     f62:	8c 33       	cpi	r24, 0x3C	; 60
     f64:	49 f4       	brne	.+18     	; 0xf78 <__stack+0x719>
		{
			DIO_TogglePin(pina3);
     f66:	83 e0       	ldi	r24, 0x03	; 3
     f68:	0e 94 31 02 	call	0x462	; 0x462 <DIO_TogglePin>
			counter=0;
     f6c:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
			timer0_SetCounter(6);
     f70:	86 e0       	ldi	r24, 0x06	; 6
     f72:	90 e0       	ldi	r25, 0x00	; 0
     f74:	0e 94 96 09 	call	0x132c	; 0x132c <timer0_SetCounter>
		}
	}
}
/********************************************************************************************/
if(blink_mode==4)
     f78:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <blink_mode>
     f7c:	84 30       	cpi	r24, 0x04	; 4
     f7e:	09 f0       	breq	.+2      	; 0xf82 <__stack+0x723>
     f80:	23 c1       	rjmp	.+582    	; 0x11c8 <__stack+0x969>
{
	counter++;
     f82:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
     f86:	8f 5f       	subi	r24, 0xFF	; 255
     f88:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
	if(FLAG==1)
     f8c:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <FLAG>
     f90:	91 30       	cpi	r25, 0x01	; 1
     f92:	b9 f4       	brne	.+46     	; 0xfc2 <__stack+0x763>
	{
		if( counter==50)
     f94:	82 33       	cpi	r24, 0x32	; 50
     f96:	49 f4       	brne	.+18     	; 0xfaa <__stack+0x74b>
		{
			DIO_WRITEPIN(pina0,LOW);
     f98:	60 e0       	ldi	r22, 0x00	; 0
     f9a:	80 e0       	ldi	r24, 0x00	; 0
     f9c:	0e 94 93 01 	call	0x326	; 0x326 <DIO_WRITEPIN>
			timer0_SetCounter(6);
     fa0:	86 e0       	ldi	r24, 0x06	; 6
     fa2:	90 e0       	ldi	r25, 0x00	; 0
     fa4:	0e 94 96 09 	call	0x132c	; 0x132c <timer0_SetCounter>
     fa8:	0c c0       	rjmp	.+24     	; 0xfc2 <__stack+0x763>
		}
		else if(counter==60)
     faa:	8c 33       	cpi	r24, 0x3C	; 60
     fac:	09 f0       	breq	.+2      	; 0xfb0 <__stack+0x751>
     fae:	58 c0       	rjmp	.+176    	; 0x1060 <__stack+0x801>
		{
			DIO_TogglePin(pina0);
     fb0:	80 e0       	ldi	r24, 0x00	; 0
     fb2:	0e 94 31 02 	call	0x462	; 0x462 <DIO_TogglePin>
			counter=0;
     fb6:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
			timer0_SetCounter(6);
     fba:	86 e0       	ldi	r24, 0x06	; 6
     fbc:	90 e0       	ldi	r25, 0x00	; 0
     fbe:	0e 94 96 09 	call	0x132c	; 0x132c <timer0_SetCounter>
		}
	}
	if(FLAG==2)
     fc2:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <FLAG>
     fc6:	82 30       	cpi	r24, 0x02	; 2
     fc8:	01 f5       	brne	.+64     	; 0x100a <__stack+0x7ab>
	{
		if( counter==50)
     fca:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
     fce:	82 33       	cpi	r24, 0x32	; 50
     fd0:	69 f4       	brne	.+26     	; 0xfec <__stack+0x78d>
		{
			DIO_WRITEPIN(pina1,LOW);
     fd2:	60 e0       	ldi	r22, 0x00	; 0
     fd4:	81 e0       	ldi	r24, 0x01	; 1
     fd6:	0e 94 93 01 	call	0x326	; 0x326 <DIO_WRITEPIN>
			DIO_WRITEPIN(pina0,LOW);
     fda:	60 e0       	ldi	r22, 0x00	; 0
     fdc:	80 e0       	ldi	r24, 0x00	; 0
     fde:	0e 94 93 01 	call	0x326	; 0x326 <DIO_WRITEPIN>
			timer0_SetCounter(6);
     fe2:	86 e0       	ldi	r24, 0x06	; 6
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	0e 94 96 09 	call	0x132c	; 0x132c <timer0_SetCounter>
     fea:	0f c0       	rjmp	.+30     	; 0x100a <__stack+0x7ab>
		}
		else if(counter==60)
     fec:	8c 33       	cpi	r24, 0x3C	; 60
     fee:	09 f0       	breq	.+2      	; 0xff2 <__stack+0x793>
     ff0:	69 c0       	rjmp	.+210    	; 0x10c4 <__stack+0x865>
		{
			DIO_TogglePin(pina1);
     ff2:	81 e0       	ldi	r24, 0x01	; 1
     ff4:	0e 94 31 02 	call	0x462	; 0x462 <DIO_TogglePin>
			DIO_TogglePin(pina0);
     ff8:	80 e0       	ldi	r24, 0x00	; 0
     ffa:	0e 94 31 02 	call	0x462	; 0x462 <DIO_TogglePin>
			counter=0;
     ffe:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
			timer0_SetCounter(6);
    1002:	86 e0       	ldi	r24, 0x06	; 6
    1004:	90 e0       	ldi	r25, 0x00	; 0
    1006:	0e 94 96 09 	call	0x132c	; 0x132c <timer0_SetCounter>
		}
	}
	if(FLAG==3)
    100a:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <FLAG>
    100e:	83 30       	cpi	r24, 0x03	; 3
    1010:	39 f5       	brne	.+78     	; 0x1060 <__stack+0x801>
	{
		if( counter==50)
    1012:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
    1016:	82 33       	cpi	r24, 0x32	; 50
    1018:	89 f4       	brne	.+34     	; 0x103c <__stack+0x7dd>
		{
			DIO_WRITEPIN(pina2,LOW);
    101a:	60 e0       	ldi	r22, 0x00	; 0
    101c:	82 e0       	ldi	r24, 0x02	; 2
    101e:	0e 94 93 01 	call	0x326	; 0x326 <DIO_WRITEPIN>
			DIO_WRITEPIN(pina1,LOW);
    1022:	60 e0       	ldi	r22, 0x00	; 0
    1024:	81 e0       	ldi	r24, 0x01	; 1
    1026:	0e 94 93 01 	call	0x326	; 0x326 <DIO_WRITEPIN>
			DIO_WRITEPIN(pina0,LOW);
    102a:	60 e0       	ldi	r22, 0x00	; 0
    102c:	80 e0       	ldi	r24, 0x00	; 0
    102e:	0e 94 93 01 	call	0x326	; 0x326 <DIO_WRITEPIN>
			timer0_SetCounter(6);
    1032:	86 e0       	ldi	r24, 0x06	; 6
    1034:	90 e0       	ldi	r25, 0x00	; 0
    1036:	0e 94 96 09 	call	0x132c	; 0x132c <timer0_SetCounter>
    103a:	12 c0       	rjmp	.+36     	; 0x1060 <__stack+0x801>
		}
		else if(counter==60)
    103c:	8c 33       	cpi	r24, 0x3C	; 60
    103e:	09 f0       	breq	.+2      	; 0x1042 <__stack+0x7e3>
    1040:	70 c0       	rjmp	.+224    	; 0x1122 <__stack+0x8c3>
		{
			DIO_TogglePin(pina2);
    1042:	82 e0       	ldi	r24, 0x02	; 2
    1044:	0e 94 31 02 	call	0x462	; 0x462 <DIO_TogglePin>
			DIO_TogglePin(pina1);
    1048:	81 e0       	ldi	r24, 0x01	; 1
    104a:	0e 94 31 02 	call	0x462	; 0x462 <DIO_TogglePin>
			DIO_TogglePin(pina0);
    104e:	80 e0       	ldi	r24, 0x00	; 0
    1050:	0e 94 31 02 	call	0x462	; 0x462 <DIO_TogglePin>
			counter=0;
    1054:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
			timer0_SetCounter(6);
    1058:	86 e0       	ldi	r24, 0x06	; 6
    105a:	90 e0       	ldi	r25, 0x00	; 0
    105c:	0e 94 96 09 	call	0x132c	; 0x132c <timer0_SetCounter>
		}
	}
	if(FLAG==4)
    1060:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <FLAG>
    1064:	84 30       	cpi	r24, 0x04	; 4
    1066:	71 f5       	brne	.+92     	; 0x10c4 <__stack+0x865>
	{
		if( counter==50)
    1068:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
    106c:	82 33       	cpi	r24, 0x32	; 50
    106e:	a9 f4       	brne	.+42     	; 0x109a <__stack+0x83b>
		{
			DIO_WRITEPIN(pina3,LOW);
    1070:	60 e0       	ldi	r22, 0x00	; 0
    1072:	83 e0       	ldi	r24, 0x03	; 3
    1074:	0e 94 93 01 	call	0x326	; 0x326 <DIO_WRITEPIN>
			DIO_WRITEPIN(pina2,LOW);
    1078:	60 e0       	ldi	r22, 0x00	; 0
    107a:	82 e0       	ldi	r24, 0x02	; 2
    107c:	0e 94 93 01 	call	0x326	; 0x326 <DIO_WRITEPIN>
			DIO_WRITEPIN(pina1,LOW);
    1080:	60 e0       	ldi	r22, 0x00	; 0
    1082:	81 e0       	ldi	r24, 0x01	; 1
    1084:	0e 94 93 01 	call	0x326	; 0x326 <DIO_WRITEPIN>
			DIO_WRITEPIN(pina0,LOW);
    1088:	60 e0       	ldi	r22, 0x00	; 0
    108a:	80 e0       	ldi	r24, 0x00	; 0
    108c:	0e 94 93 01 	call	0x326	; 0x326 <DIO_WRITEPIN>
			timer0_SetCounter(6);
    1090:	86 e0       	ldi	r24, 0x06	; 6
    1092:	90 e0       	ldi	r25, 0x00	; 0
    1094:	0e 94 96 09 	call	0x132c	; 0x132c <timer0_SetCounter>
    1098:	15 c0       	rjmp	.+42     	; 0x10c4 <__stack+0x865>
		}
		else if(counter==60)
    109a:	8c 33       	cpi	r24, 0x3C	; 60
    109c:	09 f0       	breq	.+2      	; 0x10a0 <__stack+0x841>
    109e:	6c c0       	rjmp	.+216    	; 0x1178 <__stack+0x919>
		{
			DIO_TogglePin(pina3);
    10a0:	83 e0       	ldi	r24, 0x03	; 3
    10a2:	0e 94 31 02 	call	0x462	; 0x462 <DIO_TogglePin>
			DIO_TogglePin(pina2);
    10a6:	82 e0       	ldi	r24, 0x02	; 2
    10a8:	0e 94 31 02 	call	0x462	; 0x462 <DIO_TogglePin>
			DIO_TogglePin(pina1);
    10ac:	81 e0       	ldi	r24, 0x01	; 1
    10ae:	0e 94 31 02 	call	0x462	; 0x462 <DIO_TogglePin>
			DIO_TogglePin(pina0);
    10b2:	80 e0       	ldi	r24, 0x00	; 0
    10b4:	0e 94 31 02 	call	0x462	; 0x462 <DIO_TogglePin>
			counter=0;
    10b8:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
			timer0_SetCounter(6);
    10bc:	86 e0       	ldi	r24, 0x06	; 6
    10be:	90 e0       	ldi	r25, 0x00	; 0
    10c0:	0e 94 96 09 	call	0x132c	; 0x132c <timer0_SetCounter>
		}
	}
	if(FLAG==5)
    10c4:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <FLAG>
    10c8:	85 30       	cpi	r24, 0x05	; 5
    10ca:	59 f5       	brne	.+86     	; 0x1122 <__stack+0x8c3>
	{
		if( counter==50)
    10cc:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
    10d0:	82 33       	cpi	r24, 0x32	; 50
    10d2:	a9 f4       	brne	.+42     	; 0x10fe <__stack+0x89f>
		{
			DIO_WRITEPIN(pina3,LOW);
    10d4:	60 e0       	ldi	r22, 0x00	; 0
    10d6:	83 e0       	ldi	r24, 0x03	; 3
    10d8:	0e 94 93 01 	call	0x326	; 0x326 <DIO_WRITEPIN>
			DIO_WRITEPIN(pina2,LOW);
    10dc:	60 e0       	ldi	r22, 0x00	; 0
    10de:	82 e0       	ldi	r24, 0x02	; 2
    10e0:	0e 94 93 01 	call	0x326	; 0x326 <DIO_WRITEPIN>
			DIO_WRITEPIN(pina1,LOW);
    10e4:	60 e0       	ldi	r22, 0x00	; 0
    10e6:	81 e0       	ldi	r24, 0x01	; 1
    10e8:	0e 94 93 01 	call	0x326	; 0x326 <DIO_WRITEPIN>
			DIO_WRITEPIN(pina0,LOW);
    10ec:	60 e0       	ldi	r22, 0x00	; 0
    10ee:	80 e0       	ldi	r24, 0x00	; 0
    10f0:	0e 94 93 01 	call	0x326	; 0x326 <DIO_WRITEPIN>
			timer0_SetCounter(6);
    10f4:	86 e0       	ldi	r24, 0x06	; 6
    10f6:	90 e0       	ldi	r25, 0x00	; 0
    10f8:	0e 94 96 09 	call	0x132c	; 0x132c <timer0_SetCounter>
    10fc:	12 c0       	rjmp	.+36     	; 0x1122 <__stack+0x8c3>
		}
		else if(counter==60)
    10fe:	8c 33       	cpi	r24, 0x3C	; 60
    1100:	09 f0       	breq	.+2      	; 0x1104 <__stack+0x8a5>
    1102:	62 c0       	rjmp	.+196    	; 0x11c8 <__stack+0x969>
		{
			DIO_TogglePin(pina3);
    1104:	83 e0       	ldi	r24, 0x03	; 3
    1106:	0e 94 31 02 	call	0x462	; 0x462 <DIO_TogglePin>
			DIO_TogglePin(pina2);
    110a:	82 e0       	ldi	r24, 0x02	; 2
    110c:	0e 94 31 02 	call	0x462	; 0x462 <DIO_TogglePin>
			DIO_TogglePin(pina1);
    1110:	81 e0       	ldi	r24, 0x01	; 1
    1112:	0e 94 31 02 	call	0x462	; 0x462 <DIO_TogglePin>
			counter=0;
    1116:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
			timer0_SetCounter(6);
    111a:	86 e0       	ldi	r24, 0x06	; 6
    111c:	90 e0       	ldi	r25, 0x00	; 0
    111e:	0e 94 96 09 	call	0x132c	; 0x132c <timer0_SetCounter>
		}
	}
	if(FLAG==6)
    1122:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <FLAG>
    1126:	86 30       	cpi	r24, 0x06	; 6
    1128:	39 f5       	brne	.+78     	; 0x1178 <__stack+0x919>
	{
		if( counter==50)
    112a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
    112e:	82 33       	cpi	r24, 0x32	; 50
    1130:	a9 f4       	brne	.+42     	; 0x115c <__stack+0x8fd>
		{
			DIO_WRITEPIN(pina3,LOW);
    1132:	60 e0       	ldi	r22, 0x00	; 0
    1134:	83 e0       	ldi	r24, 0x03	; 3
    1136:	0e 94 93 01 	call	0x326	; 0x326 <DIO_WRITEPIN>
			DIO_WRITEPIN(pina2,LOW);
    113a:	60 e0       	ldi	r22, 0x00	; 0
    113c:	82 e0       	ldi	r24, 0x02	; 2
    113e:	0e 94 93 01 	call	0x326	; 0x326 <DIO_WRITEPIN>
			DIO_WRITEPIN(pina1,LOW);
    1142:	60 e0       	ldi	r22, 0x00	; 0
    1144:	81 e0       	ldi	r24, 0x01	; 1
    1146:	0e 94 93 01 	call	0x326	; 0x326 <DIO_WRITEPIN>
			DIO_WRITEPIN(pina0,LOW);
    114a:	60 e0       	ldi	r22, 0x00	; 0
    114c:	80 e0       	ldi	r24, 0x00	; 0
    114e:	0e 94 93 01 	call	0x326	; 0x326 <DIO_WRITEPIN>
			timer0_SetCounter(6);
    1152:	86 e0       	ldi	r24, 0x06	; 6
    1154:	90 e0       	ldi	r25, 0x00	; 0
    1156:	0e 94 96 09 	call	0x132c	; 0x132c <timer0_SetCounter>
    115a:	0e c0       	rjmp	.+28     	; 0x1178 <__stack+0x919>
		}
		else if(counter==60)
    115c:	8c 33       	cpi	r24, 0x3C	; 60
    115e:	a1 f5       	brne	.+104    	; 0x11c8 <__stack+0x969>
		{
			DIO_TogglePin(pina3);
    1160:	83 e0       	ldi	r24, 0x03	; 3
    1162:	0e 94 31 02 	call	0x462	; 0x462 <DIO_TogglePin>
			DIO_TogglePin(pina2);
    1166:	82 e0       	ldi	r24, 0x02	; 2
    1168:	0e 94 31 02 	call	0x462	; 0x462 <DIO_TogglePin>
			counter=0;
    116c:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
			timer0_SetCounter(6);
    1170:	86 e0       	ldi	r24, 0x06	; 6
    1172:	90 e0       	ldi	r25, 0x00	; 0
    1174:	0e 94 96 09 	call	0x132c	; 0x132c <timer0_SetCounter>
		}
	}
	if(FLAG==7)
    1178:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <FLAG>
    117c:	87 30       	cpi	r24, 0x07	; 7
    117e:	21 f5       	brne	.+72     	; 0x11c8 <__stack+0x969>
	{
		if( counter==50)
    1180:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
    1184:	82 33       	cpi	r24, 0x32	; 50
    1186:	a9 f4       	brne	.+42     	; 0x11b2 <__stack+0x953>
		{
			DIO_WRITEPIN(pina3,LOW);
    1188:	60 e0       	ldi	r22, 0x00	; 0
    118a:	83 e0       	ldi	r24, 0x03	; 3
    118c:	0e 94 93 01 	call	0x326	; 0x326 <DIO_WRITEPIN>
			DIO_WRITEPIN(pina2,LOW);
    1190:	60 e0       	ldi	r22, 0x00	; 0
    1192:	82 e0       	ldi	r24, 0x02	; 2
    1194:	0e 94 93 01 	call	0x326	; 0x326 <DIO_WRITEPIN>
			DIO_WRITEPIN(pina1,LOW);
    1198:	60 e0       	ldi	r22, 0x00	; 0
    119a:	81 e0       	ldi	r24, 0x01	; 1
    119c:	0e 94 93 01 	call	0x326	; 0x326 <DIO_WRITEPIN>
			DIO_WRITEPIN(pina0,LOW);
    11a0:	60 e0       	ldi	r22, 0x00	; 0
    11a2:	80 e0       	ldi	r24, 0x00	; 0
    11a4:	0e 94 93 01 	call	0x326	; 0x326 <DIO_WRITEPIN>
			timer0_SetCounter(6);
    11a8:	86 e0       	ldi	r24, 0x06	; 6
    11aa:	90 e0       	ldi	r25, 0x00	; 0
    11ac:	0e 94 96 09 	call	0x132c	; 0x132c <timer0_SetCounter>
    11b0:	0b c0       	rjmp	.+22     	; 0x11c8 <__stack+0x969>
		}
		else if(counter==60)
    11b2:	8c 33       	cpi	r24, 0x3C	; 60
    11b4:	49 f4       	brne	.+18     	; 0x11c8 <__stack+0x969>
		{
			DIO_TogglePin(pina3);
    11b6:	83 e0       	ldi	r24, 0x03	; 3
    11b8:	0e 94 31 02 	call	0x462	; 0x462 <DIO_TogglePin>
			counter=0;
    11bc:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
			timer0_SetCounter(6);
    11c0:	86 e0       	ldi	r24, 0x06	; 6
    11c2:	90 e0       	ldi	r25, 0x00	; 0
    11c4:	0e 94 96 09 	call	0x132c	; 0x132c <timer0_SetCounter>
		}
	}
}
}
    11c8:	ff 91       	pop	r31
    11ca:	ef 91       	pop	r30
    11cc:	bf 91       	pop	r27
    11ce:	af 91       	pop	r26
    11d0:	9f 91       	pop	r25
    11d2:	8f 91       	pop	r24
    11d4:	7f 91       	pop	r23
    11d6:	6f 91       	pop	r22
    11d8:	5f 91       	pop	r21
    11da:	4f 91       	pop	r20
    11dc:	3f 91       	pop	r19
    11de:	2f 91       	pop	r18
    11e0:	0f 90       	pop	r0
    11e2:	0f be       	out	0x3f, r0	; 63
    11e4:	0f 90       	pop	r0
    11e6:	1f 90       	pop	r1
    11e8:	18 95       	reti

000011ea <Timer0_Init>:

/*this function give the HAL layer the appilty to choose the timer mode, it's scaller,
  and if it want a compare match feature or not*/
void Timer0_Init(Timer0Mode_type mode, Timer0SCALER_type scaler,OC0Mode_type oc_mode )
{
	switch(mode)
    11ea:	81 30       	cpi	r24, 0x01	; 1
    11ec:	69 f0       	breq	.+26     	; 0x1208 <Timer0_Init+0x1e>
    11ee:	28 f0       	brcs	.+10     	; 0x11fa <Timer0_Init+0x10>
    11f0:	82 30       	cpi	r24, 0x02	; 2
    11f2:	89 f0       	breq	.+34     	; 0x1216 <Timer0_Init+0x2c>
    11f4:	83 30       	cpi	r24, 0x03	; 3
    11f6:	b1 f0       	breq	.+44     	; 0x1224 <Timer0_Init+0x3a>
    11f8:	1b c0       	rjmp	.+54     	; 0x1230 <Timer0_Init+0x46>
	{
		case TIMER0_NORMAL_MODE:
		{
			clear_bit(TCCR0,WGM00);
    11fa:	83 b7       	in	r24, 0x33	; 51
    11fc:	8f 7b       	andi	r24, 0xBF	; 191
    11fe:	83 bf       	out	0x33, r24	; 51
			clear_bit(TCCR0,WGM01);
    1200:	83 b7       	in	r24, 0x33	; 51
    1202:	87 7f       	andi	r24, 0xF7	; 247
    1204:	83 bf       	out	0x33, r24	; 51
		}
		break;
    1206:	14 c0       	rjmp	.+40     	; 0x1230 <Timer0_Init+0x46>
		
		case TIMER0_PHASE_CORRECT_MODE:
		{
			set_bit(TCCR0,WGM00);
    1208:	83 b7       	in	r24, 0x33	; 51
    120a:	80 64       	ori	r24, 0x40	; 64
    120c:	83 bf       	out	0x33, r24	; 51
			clear_bit(TCCR0,WGM01);
    120e:	83 b7       	in	r24, 0x33	; 51
    1210:	87 7f       	andi	r24, 0xF7	; 247
    1212:	83 bf       	out	0x33, r24	; 51
		}
		break;
    1214:	0d c0       	rjmp	.+26     	; 0x1230 <Timer0_Init+0x46>
		
		case TIMER0_CTC_MODE:
		{
			clear_bit(TCCR0,WGM00);
    1216:	83 b7       	in	r24, 0x33	; 51
    1218:	8f 7b       	andi	r24, 0xBF	; 191
    121a:	83 bf       	out	0x33, r24	; 51
			set_bit(TCCR0,WGM01);
    121c:	83 b7       	in	r24, 0x33	; 51
    121e:	88 60       	ori	r24, 0x08	; 8
    1220:	83 bf       	out	0x33, r24	; 51
		}
		break;
    1222:	06 c0       	rjmp	.+12     	; 0x1230 <Timer0_Init+0x46>
		
		case TIMER0_FASTPWM_MODE:
		{
			set_bit(TCCR0,WGM00);
    1224:	83 b7       	in	r24, 0x33	; 51
    1226:	80 64       	ori	r24, 0x40	; 64
    1228:	83 bf       	out	0x33, r24	; 51
			set_bit(TCCR0,WGM01);
    122a:	83 b7       	in	r24, 0x33	; 51
    122c:	88 60       	ori	r24, 0x08	; 8
    122e:	83 bf       	out	0x33, r24	; 51
			//do nothing
		}
		break;
	}
	
	switch(scaler)
    1230:	86 2f       	mov	r24, r22
    1232:	90 e0       	ldi	r25, 0x00	; 0
    1234:	88 30       	cpi	r24, 0x08	; 8
    1236:	91 05       	cpc	r25, r1
    1238:	08 f0       	brcs	.+2      	; 0x123c <Timer0_Init+0x52>
    123a:	54 c0       	rjmp	.+168    	; 0x12e4 <Timer0_Init+0xfa>
    123c:	fc 01       	movw	r30, r24
    123e:	e6 5d       	subi	r30, 0xD6	; 214
    1240:	ff 4f       	sbci	r31, 0xFF	; 255
    1242:	0c 94 9c 09 	jmp	0x1338	; 0x1338 <__tablejump2__>
	{
		case TIMER0_STOP:
		{
			clear_bit(TCCR0,CS00);
    1246:	83 b7       	in	r24, 0x33	; 51
    1248:	8e 7f       	andi	r24, 0xFE	; 254
    124a:	83 bf       	out	0x33, r24	; 51
			clear_bit(TCCR0,CS01);
    124c:	83 b7       	in	r24, 0x33	; 51
    124e:	8d 7f       	andi	r24, 0xFD	; 253
    1250:	83 bf       	out	0x33, r24	; 51
			clear_bit(TCCR0,CS02);
    1252:	83 b7       	in	r24, 0x33	; 51
    1254:	8b 7f       	andi	r24, 0xFB	; 251
    1256:	83 bf       	out	0x33, r24	; 51
		}
		break;
    1258:	45 c0       	rjmp	.+138    	; 0x12e4 <Timer0_Init+0xfa>
		
		case TIMER0_SCALER_1:
		{
			set_bit(TCCR0,CS00);
    125a:	83 b7       	in	r24, 0x33	; 51
    125c:	81 60       	ori	r24, 0x01	; 1
    125e:	83 bf       	out	0x33, r24	; 51
			clear_bit(TCCR0,CS01);
    1260:	83 b7       	in	r24, 0x33	; 51
    1262:	8d 7f       	andi	r24, 0xFD	; 253
    1264:	83 bf       	out	0x33, r24	; 51
			clear_bit(TCCR0,CS02);
    1266:	83 b7       	in	r24, 0x33	; 51
    1268:	8b 7f       	andi	r24, 0xFB	; 251
    126a:	83 bf       	out	0x33, r24	; 51
		}
		break;
    126c:	3b c0       	rjmp	.+118    	; 0x12e4 <Timer0_Init+0xfa>
		
		case TIMER0_SCALER_8:
		{
			clear_bit(TCCR0,CS00);
    126e:	83 b7       	in	r24, 0x33	; 51
    1270:	8e 7f       	andi	r24, 0xFE	; 254
    1272:	83 bf       	out	0x33, r24	; 51
			set_bit(TCCR0,CS01);
    1274:	83 b7       	in	r24, 0x33	; 51
    1276:	82 60       	ori	r24, 0x02	; 2
    1278:	83 bf       	out	0x33, r24	; 51
			clear_bit(TCCR0,CS02);
    127a:	83 b7       	in	r24, 0x33	; 51
    127c:	8b 7f       	andi	r24, 0xFB	; 251
    127e:	83 bf       	out	0x33, r24	; 51
		}
		break;
    1280:	31 c0       	rjmp	.+98     	; 0x12e4 <Timer0_Init+0xfa>
		
		case TIMER0_SCALER_64:
		{
			set_bit(TCCR0,CS00);
    1282:	83 b7       	in	r24, 0x33	; 51
    1284:	81 60       	ori	r24, 0x01	; 1
    1286:	83 bf       	out	0x33, r24	; 51
			set_bit(TCCR0,CS01);
    1288:	83 b7       	in	r24, 0x33	; 51
    128a:	82 60       	ori	r24, 0x02	; 2
    128c:	83 bf       	out	0x33, r24	; 51
			clear_bit(TCCR0,CS02);
    128e:	83 b7       	in	r24, 0x33	; 51
    1290:	8b 7f       	andi	r24, 0xFB	; 251
    1292:	83 bf       	out	0x33, r24	; 51
		}
		break;
    1294:	27 c0       	rjmp	.+78     	; 0x12e4 <Timer0_Init+0xfa>
		
		case TIMER0_SCALER_256:
		{
			clear_bit(TCCR0,CS00);
    1296:	83 b7       	in	r24, 0x33	; 51
    1298:	8e 7f       	andi	r24, 0xFE	; 254
    129a:	83 bf       	out	0x33, r24	; 51
			clear_bit(TCCR0,CS01);
    129c:	83 b7       	in	r24, 0x33	; 51
    129e:	8d 7f       	andi	r24, 0xFD	; 253
    12a0:	83 bf       	out	0x33, r24	; 51
			set_bit(TCCR0,CS02);
    12a2:	83 b7       	in	r24, 0x33	; 51
    12a4:	84 60       	ori	r24, 0x04	; 4
    12a6:	83 bf       	out	0x33, r24	; 51
		}
		break;
    12a8:	1d c0       	rjmp	.+58     	; 0x12e4 <Timer0_Init+0xfa>
		
		case TIMER0_SCALER_1024:
		{
			set_bit(TCCR0,CS00);
    12aa:	83 b7       	in	r24, 0x33	; 51
    12ac:	81 60       	ori	r24, 0x01	; 1
    12ae:	83 bf       	out	0x33, r24	; 51
			clear_bit(TCCR0,CS01);
    12b0:	83 b7       	in	r24, 0x33	; 51
    12b2:	8d 7f       	andi	r24, 0xFD	; 253
    12b4:	83 bf       	out	0x33, r24	; 51
			set_bit(TCCR0,CS02);
    12b6:	83 b7       	in	r24, 0x33	; 51
    12b8:	84 60       	ori	r24, 0x04	; 4
    12ba:	83 bf       	out	0x33, r24	; 51
		}
		break;
    12bc:	13 c0       	rjmp	.+38     	; 0x12e4 <Timer0_Init+0xfa>
		
		case TIMER0_EXTERNAL_FALLING:
		{
			clear_bit(TCCR0,CS00);
    12be:	83 b7       	in	r24, 0x33	; 51
    12c0:	8e 7f       	andi	r24, 0xFE	; 254
    12c2:	83 bf       	out	0x33, r24	; 51
			set_bit(TCCR0,CS01);
    12c4:	83 b7       	in	r24, 0x33	; 51
    12c6:	82 60       	ori	r24, 0x02	; 2
    12c8:	83 bf       	out	0x33, r24	; 51
			set_bit(TCCR0,CS02);
    12ca:	83 b7       	in	r24, 0x33	; 51
    12cc:	84 60       	ori	r24, 0x04	; 4
    12ce:	83 bf       	out	0x33, r24	; 51
		}
		break;
    12d0:	09 c0       	rjmp	.+18     	; 0x12e4 <Timer0_Init+0xfa>
		
		case TIMER0_EXTERNAL_RISING:
		{
			set_bit(TCCR0,CS00);
    12d2:	83 b7       	in	r24, 0x33	; 51
    12d4:	81 60       	ori	r24, 0x01	; 1
    12d6:	83 bf       	out	0x33, r24	; 51
			set_bit(TCCR0,CS01);
    12d8:	83 b7       	in	r24, 0x33	; 51
    12da:	82 60       	ori	r24, 0x02	; 2
    12dc:	83 bf       	out	0x33, r24	; 51
			set_bit(TCCR0,CS02);
    12de:	83 b7       	in	r24, 0x33	; 51
    12e0:	84 60       	ori	r24, 0x04	; 4
    12e2:	83 bf       	out	0x33, r24	; 51
			//do nothing
		}
		break;
	}
	
	switch(oc_mode)
    12e4:	41 30       	cpi	r20, 0x01	; 1
    12e6:	69 f0       	breq	.+26     	; 0x1302 <Timer0_Init+0x118>
    12e8:	28 f0       	brcs	.+10     	; 0x12f4 <Timer0_Init+0x10a>
    12ea:	42 30       	cpi	r20, 0x02	; 2
    12ec:	89 f0       	breq	.+34     	; 0x1310 <Timer0_Init+0x126>
    12ee:	43 30       	cpi	r20, 0x03	; 3
    12f0:	b1 f0       	breq	.+44     	; 0x131e <Timer0_Init+0x134>
    12f2:	08 95       	ret
	{
		case OC0_DISCONNECTED:
		{
			clear_bit(TCCR0,COM00);
    12f4:	83 b7       	in	r24, 0x33	; 51
    12f6:	8f 7e       	andi	r24, 0xEF	; 239
    12f8:	83 bf       	out	0x33, r24	; 51
			clear_bit(TCCR0,COM01);
    12fa:	83 b7       	in	r24, 0x33	; 51
    12fc:	8f 7d       	andi	r24, 0xDF	; 223
    12fe:	83 bf       	out	0x33, r24	; 51
		}
		break;
    1300:	08 95       	ret
		
		case  OC0_TOGGLE:
		{
			set_bit(TCCR0,COM00);
    1302:	83 b7       	in	r24, 0x33	; 51
    1304:	80 61       	ori	r24, 0x10	; 16
    1306:	83 bf       	out	0x33, r24	; 51
			clear_bit(TCCR0,COM01);
    1308:	83 b7       	in	r24, 0x33	; 51
    130a:	8f 7d       	andi	r24, 0xDF	; 223
    130c:	83 bf       	out	0x33, r24	; 51
		}
		break;
    130e:	08 95       	ret
		
		case OC0_NON_INVERTING:
		{
			clear_bit(TCCR0,COM00);
    1310:	83 b7       	in	r24, 0x33	; 51
    1312:	8f 7e       	andi	r24, 0xEF	; 239
    1314:	83 bf       	out	0x33, r24	; 51
			set_bit(TCCR0,COM01);
    1316:	83 b7       	in	r24, 0x33	; 51
    1318:	80 62       	ori	r24, 0x20	; 32
    131a:	83 bf       	out	0x33, r24	; 51
		}
		break;
    131c:	08 95       	ret
		case  OC0_INVERTING:
		{
			set_bit(TCCR0,COM00);
    131e:	83 b7       	in	r24, 0x33	; 51
    1320:	80 61       	ori	r24, 0x10	; 16
    1322:	83 bf       	out	0x33, r24	; 51
			set_bit(TCCR0,COM01);
    1324:	83 b7       	in	r24, 0x33	; 51
    1326:	80 62       	ori	r24, 0x20	; 32
    1328:	83 bf       	out	0x33, r24	; 51
    132a:	08 95       	ret

0000132c <timer0_SetCounter>:
}
/*******************************************************************************************/
/* this function sets the offset of the timer for easier tick time and ovf calculations */
void timer0_SetCounter(uint8_t offset)
{
	TCNT0=offset;
    132c:	82 bf       	out	0x32, r24	; 50
    132e:	08 95       	ret

00001330 <Timer0_OVF_InterrupEnable>:
}
/****************************************************************************************/
/*it enables the over flow interrupt*/
void Timer0_OVF_InterrupEnable(void)
{
	set_bit(TIMSK,TOIE0);
    1330:	89 b7       	in	r24, 0x39	; 57
    1332:	81 60       	ori	r24, 0x01	; 1
    1334:	89 bf       	out	0x39, r24	; 57
    1336:	08 95       	ret

00001338 <__tablejump2__>:
    1338:	ee 0f       	add	r30, r30
    133a:	ff 1f       	adc	r31, r31
    133c:	05 90       	lpm	r0, Z+
    133e:	f4 91       	lpm	r31, Z
    1340:	e0 2d       	mov	r30, r0
    1342:	09 94       	ijmp

00001344 <_exit>:
    1344:	f8 94       	cli

00001346 <__stop_program>:
    1346:	ff cf       	rjmp	.-2      	; 0x1346 <__stop_program>
